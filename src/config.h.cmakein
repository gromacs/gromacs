/* Manually created from config.h.in to work with cmake */

/* Disable warnings about double-to-float conversion accuracy loss on MSVC */
#ifdef _MSC_VER
#pragma warning (disable : 4305)
#pragma warning (disable : 4244)
#pragma warning (disable : 4101)
#pragma warning (disable : 4996)
#pragma warning (disable : 4267)
#pragma warning (disable : 4090)
#endif

/* Name of package (translate from cmake to autoconf macro name) */
#define PACKAGE  "@PROJECT_NAME@"

/* Version number of package (translate from cmake to autoconf macro name) */
#define VERSION  "@PROJECT_VERSION@"

/* Use the version string from generated version.h */
#cmakedefine USE_VERSION_H

/* Default location of data files */
#cmakedefine GMXLIBDIR "@GMXLIBDIR@"

/* Hardware and OS version for build host */
#cmakedefine BUILD_MACHINE "@BUILD_MACHINE@"

/* Date and time for build */
#cmakedefine BUILD_TIME "@BUILD_TIME@"

/* User doing build */
#cmakedefine BUILD_USER "@BUILD_USER@"

/* Turn off water-water neighborlist optimization only */
#cmakedefine DISABLE_WATERWATER_NLIST

/* Turn off all water neighborlist optimization */
#cmakedefine DISABLE_WATER_NLIST

/* Fortran support */
#cmakedefine GMX_FORTRAN

/* Define to a macro mangling the given C identifier (in lower and upper
   case), which must not contain underscores, for linking with Fortran. */
#define F77_FUNC(name,NAME)     @F77_FUNCDEF@

/* As F77_FUNC, but for C identifiers containing underscores. */
#define F77_FUNC_(name,NAME)    @F77_FUNCDEF_@

/* Use the d prefix on fftw2 includes */
#cmakedefine FFTW2_NAME_DFFTW

/* Dont use any prefix on fftw2 includes */
#cmakedefine FFTW2_NAME_FFTW

/* Use the s prefix on fftw2 includes */
#cmakedefine FFTW2_NAME_SFFTW

/* IEEE754 floating-point format. Memory layout is defined by macros
 * GMX_IEEE754_BIG_ENDIAN_BYTE_ORDER and GMX_IEEE754_BIG_ENDIAN_WORD_ORDER. 
 */
#cmakedefine GMX_FLOAT_FORMAT_IEEE754

/* Use assembly intrinsics kernels for BlueGene */
#cmakedefine GMX_BLUEGENE

/* Power6 acceleration */
#cmakedefine GMX_POWER6

/* Work around broken calloc() */
#cmakedefine GMX_BROKEN_CALLOC

/* Enable special hacks for Cray XT3 */
#cmakedefine GMX_CRAY_XT3

/* Do not optimize FFTW setups (not needed with SSE FFT kernels) */
#cmakedefine GMX_DISABLE_FFTW_MEASURE

/* Compile in double precision */
#cmakedefine GMX_DOUBLE

/* Use Built-in FFTPACK FFT library */
#cmakedefine GMX_FFT_FFTPACK

/* Use FFTW2 FFT library */
#cmakedefine GMX_FFT_FFTW2

/* Use FFTW3 FFT library */
#cmakedefine GMX_FFT_FFTW3

/* Use Intel MKL FFT library */
#cmakedefine GMX_FFT_MKL

/* Use AMD core math library */
#cmakedefine GMX_FFT_ACML

/* Single-precision SSE instructions on ia32 */
#cmakedefine GMX_IA32_SSE

/* Double-precision SSE2 instructions on ia32 */
#cmakedefine GMX_IA32_SSE2

/* Use ia64 assembly tuned for Itanium2 */
#cmakedefine GMX_IA64_ASM

/* Integer byte order is big endian. */
#cmakedefine GMX_INTEGER_BIG_ENDIAN 

/* Use our own instead of system XDR libraries */
#cmakedefine GMX_INTERNAL_XDR

/* Use MPI (with mpicc) for parallelization */
#cmakedefine GMX_LIB_MPI

/* MPI_IN_PLACE exists for collective operations */
#cmakedefine MPI_IN_PLACE_EXISTS

/* Make a parallel version of GROMACS using message passing 
   (MPI or thread_mpi) */
#cmakedefine GMX_MPI

/* Use threads for parallelization */
#cmakedefine GMX_THREADS

/* Use old threading (domain decomp force calc) code */
#cmakedefine GMX_THREAD_SHM_FDECOMP 

/* Ignore calls to nice(3) */
#cmakedefine GMX_NO_NICE

/* Ignore calls to system(3) */
#cmakedefine GMX_NO_SYSTEM

/* Use PowerPC Altivec inner loops */
#cmakedefine GMX_PPC_ALTIVEC

/* Use (modified) Gamess-UK for QM-MM calculations */
#cmakedefine GMX_QMMM_GAMESS

/* Use (modified) Gaussian0x for QM-MM calculations */
#cmakedefine GMX_QMMM_GAUSSIAN

/* Use (modified) Mopac 7 for QM-MM calculations */
#cmakedefine GMX_QMMM_MOPAC

/* Use the GROMACS software 1/sqrt(x) */
#cmakedefine GMX_SOFTWARE_INVSQRT

/* Use the PowerPC hardware 1/sqrt(x) */
#cmakedefine GMX_POWERPC_INVSQRT

/* Compile with dlopen */
#cmakedefine GMX_DLOPEN

/* Define when pthreads are used */
#cmakedefine THREAD_PTHREADS

/* Define when Windows threads are used */
#cmakedefine THREAD_WINDOWS

/* Define for busy wait option  */
#cmakedefine TMPI_WAIT_FOR_NO_ONE

/* Define for copy buffer option */
#cmakedefine TMPI_COPY_BUFFER

/* Define for profiling option */
#cmakedefine TMPI_PROFILE

/* Define for sysconf() */
#cmakedefine HAVE_SYSCONF

/* Define for GetSystemInfo() */
#cmakedefine HAVE_SYSTEM_INFO

/* Single-precision SSE instructions on X86_64 */
#cmakedefine GMX_X86_64_SSE

/* Double-precision SSE2 instructions on X86_64 */
#cmakedefine GMX_X86_64_SSE2

/* Enable x86 gcc inline assembly */
#cmakedefine GMX_X86_GCC_INLINE_ASM

/* Enable x86 MSVC inline assembly */
#cmakedefine GMX_X86_MSVC_INLINE_ASM

/* Support for SSE intrinsics */
#cmakedefine GMX_SSE

/* Support for SSE2 intrinsics */
#cmakedefine GMX_SSE2

/* Support for SSE3 intrinsics */
#cmakedefine GMX_SSE3

/* Support for SSE4.1 intrinsics */
#cmakedefine GMX_SSE4_1

/* Define to 1 if you have the <altivec.h> header file. */
#cmakedefine HAVE_ALTIVEC_H

/* Define to 1 if the system has the type gmx_bool. */
#cmakedefine HAVE_BOOL

/* Define to 1 if fseeko (and presumably ftello) exists and is declared. */
#cmakedefine HAVE_FSEEKO

/* Define to 1 if _fseeki64 (and presumably _fseeki64) exists and is declared. */
#cmakedefine HAVE__FSEEKI64

/* Define to 1 if you have the m library (-lm). */
#cmakedefine HAVE_LIBM

/* Define to 1 if you have the mkl library (-lmkl). */
#cmakedefine HAVE_LIBMKL

/* Define to 1 if you have the xml2 library (-lxml2). */
#cmakedefine HAVE_LIBXML2

/* Define to 1 if you have the dl library (-ldl). */
#cmakedefine HAVE_LIBDL

/* Have io.h (windows)*/
#cmakedefine HAVE_IO_H

/* Define to 1 if you have the strcasecmp() function. */
#cmakedefine HAVE_STRCASECMP

/* Define to 1 if you have the strdup() function. */
#cmakedefine HAVE_STRDUP

/* Define to 1 if you have the vfprintf() function. */
#cmakedefine HAVE_VFPRINTF

/* Define to 1 if you have the memcmp() function. */
#cmakedefine HAVE_MEMCMP

/* Define to 1 if you have the posix_memalign() function. */
#cmakedefine HAVE_POSIX_MEMALIGN

/* Define to 1 if you have the memalign() function. */
#cmakedefine HAVE_MEMALIGN

/* Define to 1 if you have the MSVC _aligned_malloc() function. */
#cmakedefine HAVE__ALIGNED_MALLOC

/* Define to 1 if you have the gettimeofday() function. */
#cmakedefine HAVE_GETTIMEOFDAY

/* Define to 1 if you have the cbrt() function. */
#cmakedefine HAVE_CBRT

/* Define to 1 if you have the isnan() function. */
#cmakedefine HAVE_ISNAN

/* Define to 1 if you have the _isnan() function. */
#cmakedefine HAVE__ISNAN

/* Define to 1 if you have the isfinite() function. */
#cmakedefine HAVE_ISFINITE

/* Define to 1 if you have the _isfinite() function. */
#cmakedefine HAVE__ISFINITE

/* Define to 1 if you have the fsync() function. */
#cmakedefine HAVE_FSYNC

/* Define to 1 if you have the Windows _commit() function. */
#cmakedefine HAVE__COMMIT

/* Define to 1 if you have the fileno() function. */
#cmakedefine HAVE_FILENO

/* Define to 1 if you have the _fileno() function. */
#cmakedefine HAVE__FILENO

/* Define to 1 if you have the <string.h> header file. */
#cmakedefine HAVE_STRING_H

/* Define to 1 if yo have the <math.h> header file. */
#cmakedefine HAVE_MATH_H

/* Define to 1 if yo have the <limits.h> header file. */
#cmakedefine HAVE_LIMITS_H

/* Define to 1 if yo have the <memory.h> header file. */
#cmakedefine HAVE_MEMORY_H

/* Define to 1 if yo have the <unistd.h> header file. */
#cmakedefine HAVE_UNISTD_H

/* Define to 1 if yo have the <pwd.h> header file. */
#cmakedefine HAVE_PWD_H

/* Define to 1 if yo have the <stdint.h> header file. */
#cmakedefine HAVE_STDINT_H

/* Define to 1 if yo have the <stdlib.h> header file. */
#cmakedefine HAVE_STDLIB_H

/* Define to 1 if yo have the <pthread.h> header file. */
#cmakedefine HAVE_PTHREAD_H

/* Define to 1 if yo have the <dirent.h> header file. */
#cmakedefine HAVE_DIRENT_H

/* Define to 1 if yo have the <inttypes.h> header file. */
#cmakedefine HAVE_INTTYPES_H

/* Define to 1 if yo have the <regex.h> header file. */
#cmakedefine HAVE_REGEX_H

/* Define to 1 if you have the <sys/types.h> header file. */
#cmakedefine HAVE_SYS_TYPES_H

/* Define to 1 if you have the <sys/stat.h> header file. */
#cmakedefine HAVE_SYS_STAT_H

/* Define to 1 if you have the <sys/time.h> header file. */
#cmakedefine HAVE_SYS_TIME_H

/* Define to 1 if you have the <rpc/rpc.h> header file. */
#cmakedefine HAVE_RPC_RPC_H

/* Define to 1 if you have the <rpc/xdr.h> header file. */
#cmakedefine HAVE_RPC_XDR_H

/* Define to 1 if yo have the <xmmintrin.h> header file. */
#cmakedefine HAVE_XMMINTRIN_H

/* Define to 1 if yo have the <emmintrin.h> header file. */
#cmakedefine HAVE_EMMINTRIN_H

/* Define to 1 if yo have the <pmmintrin.h> header file. */
#cmakedefine HAVE_PMMINTRIN_H

/* Define to 1 if yo have the <smmintrin.h> header file. */
#cmakedefine HAVE_SMMINTRIN_H

/* Define for sched.h (this is for thread_mpi)*/
#define HAVE_SCHED_H

/* Define to 1 if you have the vprintf() function. */
#cmakedefine HAVE_VPRINTF

/* Bytes in IEEE fp word are in big-endian order if set, little-endian if not.
   Only relevant when FLOAT_FORMAT_IEEE754 is defined. */
#cmakedefine GMX_IEEE754_BIG_ENDIAN_BYTE_ORDER

/* The two words in a double precision variable are in b ig-endian order if
   set, little-endian if not. Do NOT assume this is the same as the byte
   order! Only relevant when FLOAT_FORMAT_IEEE754 is defined. */
#cmakedefine GMX_IEEE754_BIG_ENDIAN_WORD_ORDER

/* Define as the return type of signal handlers (int or void). */
#cmakedefine RETSIGTYPE @RETSIGTYPE@

/* Define if SIGUSR1 is present */
#cmakedefine HAVE_SIGUSR1

/* The size of int, as computed by sizeof. */
#cmakedefine SIZEOF_INT @SIZEOF_INT@

/* The size of long int, as computed by sizeof. */
#cmakedefine SIZEOF_LONG_INT @SIZEOF_LONG_INT@

/* The size of long long int, as computed by sizeof. */
#cmakedefine SIZEOF_LONG_LONG_INT @SIZEOF_LONG_LONG_INT@

/* The size of off_t, as computed by sizeof. */
#cmakedefine SIZEOF_OFF_T @SIZEOF_OFF_T@

/* The size of void*, as computed by sizeof. */
#cmakedefine SIZEOF_VOIDP @SIZEOF_VOIDP@

/* Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2). */
#cmakedefine _LARGEFILE_SOURCE

/* Define for large files, on AIX-style hosts. */
#cmakedefine _LARGE_FILES

/* Some systems requires this to be set to 64 for large file support */
#cmakedefine _FILE_OFFSET_BITS @_FILE_OFFSET_BITS@

/* Gromacs shortcut define for fseeko & ftello being present with 64-bit support */
#cmakedefine GMX_LARGEFILES

/* Define to int if <sys/types.h> does not define. */
#cmakedefine gid_t int

/* Define to __inline__ or __inline if that is what the C compiler
   calls it, or to nothing if inline is not supported under any name.  */
#ifndef __cplusplus
#define inline ${INLINE_KEYWORD}
#endif

/* Define to __restrict__ or __restrict if that is what the C compiler
   calls it, or to nothing if restrict is not supported under any name.  */
#define restrict ${RESTRICT_KEYWORD}

#ifndef CPLUSPLUS
#ifdef __cplusplus
#define CPLUSPLUS
#endif
#endif  

/* Define to long int if <sys/types.h> does not define. */                    
#cmakedefine off_t int                                                                
                                                                                
/* Define to unsigned int if <sys/types.h> does not define. */
#cmakedefine size_t int                                                                

/* Define to int if <sys/types.h> does not define. */
#cmakedefine uid_t int
                                                                
/* Build special-purpose mdrun library */
#cmakedefine GMX_FAHCORE   

#ifdef GMX_FAHCORE
#define FULLINDIRECT 1
#define USE_FAH_XDR  1
#include "swindirect.h"
#endif

/* Define if we have pipes */
#cmakedefine HAVE_PIPES


/* Catch stupid CMake problems on OS X */
#ifdef __APPLE__
#  if ((defined(__LP64__) && __LP64__ && defined(SIZEOF_VOIDP) && SIZEOF_VOIDP<8) || ( (!defined(__LP64__) || __LP64__==0) && (defined(SIZEOF_VOIDP) && SIZEOF_VOIDP>4)))
#    error "Inconsistency between current OS X architecture and the one used to generate original" 
#    error "CMake configuration. This is probably caused by starting CMake with the default value"
#    error "for CMAKE_OSX_ARCHITECTURES (blank), and then changing it. In this case all the tests"
#    error "will have been performed with the original (now incorrect) architecture."
#    error "To fix this, set CMAKE_OSX_ARCHITECTURES on the _command_line_ before starting CMake,"
#    error "or create a new such entry with your choice in the GUI _before_ hitting 'configure'."
#  endif
#endif
