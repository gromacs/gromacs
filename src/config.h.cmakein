/*
 * This file is part of the GROMACS molecular simulation package.
 *
 * Copyright 2009- The GROMACS Authors
 * and the project initiators Erik Lindahl, Berk Hess and David van der Spoel.
 * Consult the AUTHORS/COPYING files and https://www.gromacs.org for details.
 *
 * GROMACS is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * GROMACS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with GROMACS; if not, see
 * https://www.gnu.org/licenses, or write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.
 *
 * If you want to redistribute modifications to GROMACS, please
 * consider that scientific software is very special. Version
 * control is crucial - bugs must be traceable. We will be happy to
 * consider code for inclusion in the official distribution, but
 * derived work must not be called official GROMACS. Details are found
 * in the README & COPYING files - if they are missing, get the
 * official version at https://www.gromacs.org.
 *
 * To help us fund GROMACS development, we humbly ask that you cite
 * the research papers on the package. Check out https://www.gromacs.org.
 */
/*! \libinternal \file
 * \brief
 * Include file for configuration macros from the build system.
 *
 * This header is not installed, so headers must not reference macros defined
 * here.
 *
 * \inlibraryapi
 */
#ifndef GMX_CONFIG_H
#define GMX_CONFIG_H

/* TODO: For now, disable Doxygen warnings from here */
/*! \cond */

/* Work around broken calloc() */
#cmakedefine01 GMX_BROKEN_CALLOC

/* Do not optimize FFTW setups (not needed with SSE FFT kernels) */
#cmakedefine01 GMX_DISABLE_FFTW_MEASURE

/* Use FFTW3 FFT library */
#cmakedefine01 GMX_FFT_FFTW3

/* Use the ARM Performance library with FFTW3 compatibility */
#cmakedefine01 GMX_FFT_ARMPL_FFTW3

/* Use MKL FFT library */
#cmakedefine01 GMX_FFT_MKL

/* Use built in fftpack FFT library */
#cmakedefine01 GMX_FFT_FFTPACK

/* Use cuFFT library for FFT on GPUs */
#cmakedefine01 GMX_GPU_FFT_CUFFT
/* Use clFFT library for FFT on GPUs */
#cmakedefine01 GMX_GPU_FFT_CLFFT
/* Use VkFFT library for FFT on GPUs */
#cmakedefine01 GMX_GPU_FFT_VKFFT
/* Use MKL library for FFT on GPUs */
#cmakedefine01 GMX_GPU_FFT_MKL
/* Use oneMath interface library for FFT on GPUs */
#cmakedefine01 GMX_GPU_FFT_ONEMATH
/* Use rocFFT library for FFT on GPUs */
#cmakedefine01 GMX_GPU_FFT_ROCFFT
/* Use hipFFT library for FFT on GPUs */
#cmakedefine01 GMX_GPU_FFT_HIPFFT
/* Use double-batched FFT library (BBFFT) for FFT on GPUs */
#cmakedefine01 GMX_GPU_FFT_BBFFT

/* VKFFT Library version */
#define vkfft_VERSION "@vkfft_VERSION@"

/* rocFFT version */
#define rocfft_VERSION "@rocfft_VERSION@"

/* hipFFT version */
#define hipfft_VERSION "@hipfft_VERSION@"

/* HeFFTe version */
#define Heffte_VERSION "@Heffte_VERSION@"

/* Double-Batched FFT Library version (still called bbfft in the implementation) */
#define bbfft_VERSION "@bbfft-sycl_VERSION@"

/* Target platform is x86 or x86_64 */
#cmakedefine01 GMX_TARGET_X86

/** Define if we are building natively on Windows */
#cmakedefine01 GMX_NATIVE_WINDOWS

/** Define if we are building for Cygwin */
#cmakedefine01 GMX_CYGWIN

/* SSE2 was selected for SIMD instruction set level */
#cmakedefine01 GMX_SIMD_X86_SSE2

/* SSE4.1 was selected as SIMD instructions */
#cmakedefine01 GMX_SIMD_X86_SSE4_1

/* AVX 128-bit FMA was selected as SIMD instructions */
#cmakedefine01 GMX_SIMD_X86_AVX_128_FMA

/* AVX 256-bit was selected as SIMD instructions */
#cmakedefine01 GMX_SIMD_X86_AVX_256

/* AVX2 256-bit SIMD instruction set level was selected */
#cmakedefine01 GMX_SIMD_X86_AVX2_256

/* AVX2 128-bit SIMD instruction set level was selected */
#cmakedefine01 GMX_SIMD_X86_AVX2_128

/* AVX-512F foundation level instruction SIMD */
#cmakedefine01 GMX_SIMD_X86_AVX_512

/* AVX-512ER foundation level instruction SIMD */
#cmakedefine01 GMX_SIMD_X86_AVX_512_KNL

/* ARM (AArch64) NEON Advanced SIMD instruction set level was selected */
#cmakedefine01 GMX_SIMD_ARM_NEON_ASIMD

/* ARM (SVE) Scalable Vector extensions */
#cmakedefine01 GMX_SIMD_ARM_SVE

/* SVE vector length */
#define GMX_SIMD_ARM_SVE_LENGTH_VALUE @GMX_SIMD_ARM_SVE_LENGTH_VALUE@

/* IBM VSX was selected as SIMD instructions (Power 7 and later) */
#cmakedefine01 GMX_SIMD_IBM_VSX

/* Reference SIMD implementation for testing */
#cmakedefine01 GMX_SIMD_REFERENCE

/* String for SIMD instruction choice (for writing to log files and stdout) */
#define GMX_SIMD_STRING "@GMX_SIMD_ACTIVE@"

/* Calling convention string (if any) for routines with SIMD variable args */
#define gmx_simdcall @GMX_SIMD_CALLING_CONVENTION@

/* Target mantissa accuracy for SIMD single precision math */
#define GMX_SIMD_ACCURACY_BITS_SINGLE @GMX_SIMD_ACCURACY_BITS_SINGLE@

/* Target mantissa accuracy for SIMD double precision math */
#define GMX_SIMD_ACCURACY_BITS_DOUBLE @GMX_SIMD_ACCURACY_BITS_DOUBLE@

/* Enable code that requires AVX-512 instruction support, without GMX_SIMD=AVX_512 */
#cmakedefine01 SIMD_AVX_512_CXX_SUPPORTED

/* Whether NBNXM and other SIMD kernels should be compiled */
#cmakedefine01 GMX_USE_SIMD_KERNELS

/* Integer byte order is big endian. */
#cmakedefine01 GMX_INTEGER_BIG_ENDIAN

/* Use our own instead of system XDR libraries */
#cmakedefine01 GMX_INTERNAL_XDR

/* Compile to use TNG library */
#cmakedefine01 GMX_USE_TNG

/* Use (and compile) HDF5 related i/o features (H5MD) */
#cmakedefine01 GMX_USE_HDF5

/* Add support for tracing using Extrae */
#cmakedefine01 HAVE_EXTRAE

/* Enable NVIDIA NVTX instrumentation */
#cmakedefine01 GMX_USE_NVTX

/* Enable AMD ROCTX instrumentation */
#cmakedefine01 GMX_USE_ROCTX

/* Enable Intel ITT instrumentation */
#cmakedefine01 GMX_USE_ITT

/* Use MPI (with mpicc) for parallelization */
#cmakedefine01 GMX_LIB_MPI

/* Use threads_mpi for parallelization */
#cmakedefine01 GMX_THREAD_MPI

/* Make a parallel version of GROMACS using message passing
   (MPI or thread_mpi) */
#define GMX_MPI (GMX_LIB_MPI || GMX_THREAD_MPI)

/* Use NVSHMEM for GPU data communication*/
#cmakedefine01 GMX_NVSHMEM

/* Use OpenMP multithreading */
#cmakedefine01 GMX_OPENMP

/* Use the Portable Hardware Locality package (hwloc) */
#cmakedefine01 GMX_USE_HWLOC

/* Library version found for hwloc during configuration time */
#define GMX_HWLOC_API_VERSION @GMX_HWLOC_API_VERSION@

/* Can and should use nice(3) to set priority */
#cmakedefine01 GMX_USE_NICE

/* Maximum number of OpenMP threads supported */
#define GMX_OPENMP_MAX_THREADS @GMX_OPENMP_MAX_THREADS@

/* Use if we cannot rename checkpoints */
#cmakedefine01 GMX_NO_RENAME

/* Use sub-counters */
#cmakedefine01 GMX_CYCLE_SUBCOUNTERS

/* Compile with plugin support */
#cmakedefine01 GMX_USE_PLUGINS

/* Fallback path for VMD plug-ins */
#define GMX_VMD_PLUGIN_PATH "@GMX_VMD_PLUGIN_PATH@"

/* Define when pthreads are used */
#cmakedefine THREAD_PTHREADS

/* Define when Windows threads are used */
#cmakedefine THREAD_WINDOWS

/* Define for busy wait option  */
/* See gmxpre-config.h.cmakein for explanation for the #ifndef */
#ifndef TMPI_WAIT_FOR_NO_ONE
#cmakedefine01 TMPI_WAIT_FOR_NO_ONE
#endif

/* Define for copy buffer option */
#cmakedefine TMPI_COPY_BUFFER

/* Define for tmpi warnings option */
#cmakedefine TMPI_WARNINGS

/* Define for profiling option */
#cmakedefine TMPI_PROFILE

/* Define for Linux pthread_setaffinity_np */
#cmakedefine HAVE_PTHREAD_SETAFFINITY

/* Enable x86 gcc inline assembly */
#cmakedefine01 GMX_X86_GCC_INLINE_ASM

/* Define if any type of GPU acceleration is compiled */
#cmakedefine01 GMX_GPU

/* Define if CUDA GPU acceleration is compiled */
#cmakedefine01 GMX_GPU_CUDA

/* Define if CUDA Graphs or SYCL Graph support is available */
#cmakedefine01 GMX_HAVE_GPU_GRAPH_SUPPORT

/* Define if sycl::ext::oneapi::experimental::submit and cgh.ext_codeplay_enqueue_native_command should be used */
#cmakedefine01 GMX_SYCL_ENABLE_EXPERIMENTAL_SUBMIT_API

/* Define if sycl::aspect::ext_oneapi_limited_graph exists */
#cmakedefine01 HAVE_SYCL_ASPECT_EXT_ONEAPI_LIMITED_GRAPH

/* Define if OpenCL GPU acceleration is compiled */
#cmakedefine01 GMX_GPU_OPENCL

/* Define if SYCL GPU acceleration is compiled */
#cmakedefine01 GMX_GPU_SYCL

/* Define if AdaptiveCpp (hipSYCL) is used for SYCL support */
#cmakedefine01 GMX_SYCL_ACPP

/* Define if Intel oneAPI DPC++ is used for SYCL support */
#cmakedefine01 GMX_SYCL_DPCPP

// Define if AdaptiveCpp has HIP target(s)
#cmakedefine01 GMX_ACPP_HAVE_HIP_TARGET

// Define if AdaptiveCpp has CUDA target(s)
#cmakedefine01 GMX_ACPP_HAVE_CUDA_TARGET

/* Use a single compilation unit when compiling the CUDA (non-bonded) kernels.  */
#cmakedefine01 GMX_CUDA_NB_SINGLE_COMPILATION_UNIT

/* Define if HIP GPU acceleration is compiled */
#cmakedefine01 GMX_GPU_HIP

/* Define if using HIP unified memory */
#cmakedefine01 GMX_GPU_HIP_UNIFIED_MEMORY

/* Whether MPI can report its GPU-awareness  */
#cmakedefine01 HAVE_MPI_EXT
#cmakedefine01 MPI_SUPPORTS_CUDA_AWARE_DETECTION
#cmakedefine01 MPI_SUPPORTS_HIP_AWARE_DETECTION
#cmakedefine01 MPI_SUPPORTS_ROCM_AWARE_DETECTION
#cmakedefine01 MPI_SUPPORTS_ZE_AWARE_DETECTION

/* Define if HeFFTe library found */
#cmakedefine01 GMX_USE_Heffte

/* Define if cuFFTMp library found */
#cmakedefine01 GMX_USE_cuFFTMp

/* Define constants for build types (starting at 1 to make sure undefined values don't match) */
#define CMAKE_BUILD_TYPE_DEBUG 1
#define CMAKE_BUILD_TYPE_RELEASE 2
#define CMAKE_BUILD_TYPE_RELWITHDEBINFO 3
#define CMAKE_BUILD_TYPE_MINSIZEREL 4
#define CMAKE_BUILD_TYPE_REFERENCE 5
#define CMAKE_BUILD_TYPE_RELWITHASSERT 6
#define CMAKE_BUILD_TYPE_PROFILE 7
#define CMAKE_BUILD_TYPE_TSAN 8
#define CMAKE_BUILD_TYPE_ASAN 9
#define CMAKE_BUILD_TYPE_MSAN 10
#define CMAKE_BUILD_TYPE_UBSAN 11
#cmakedefine CMAKE_BUILD_TYPE CMAKE_BUILD_TYPE_@CMAKE_BUILD_TYPE_UPPER@

/* Define relative path to OpenCL kernels */
#define GMX_INSTALL_OCLDIR "@GMX_INSTALL_OCLDIR@"

/* Minimum required OpenCL version support (both API and device) - split into integer components for convenience */
#define REQUIRED_OPENCL_MIN_VERSION_MAJOR @REQUIRED_OPENCL_MIN_VERSION_MAJOR@
#define REQUIRED_OPENCL_MIN_VERSION_MINOR @REQUIRED_OPENCL_MIN_VERSION_MINOR@

/* Define to 1 if fseeko (and presumably ftello) exists and is declared. */
#cmakedefine01 HAVE_FSEEKO

/* Define to 1 if _fseeki64 (and presumably _fseeki64) exists and is declared. */
//NOLINTNEXTLINE(bugprone-reserved-identifier)
#cmakedefine01 HAVE__FSEEKI64

/* Have io.h (windows)*/
#cmakedefine01 HAVE_IO_H

/* Define to 1 if you have the posix_memalign() function. */
#cmakedefine01 HAVE_POSIX_MEMALIGN

/* Define to 1 if you have the memalign() function. */
#cmakedefine01 HAVE_MEMALIGN

/* Define to 1 if you have the MSVC _aligned_malloc() function. */
//NOLINTNEXTLINE(bugprone-reserved-identifier)
#cmakedefine01 HAVE__ALIGNED_MALLOC

/* Define to 1 if you have the clock_gettime() function. */
#cmakedefine01 HAVE_CLOCK_GETTIME

/* Define to 1 if you have the gettimeofday() function. */
#cmakedefine01 HAVE_GETTIMEOFDAY

/* Define to 1 if you have the rdtscp instruction (ie essentially all x86 still in use. */
#cmakedefine01 GMX_USE_RDTSCP

/* Define to 1 if you have the fsync() function. */
#cmakedefine01 HAVE_FSYNC

/* Define to 1 if you have the Windows _commit() function. */
//NOLINTNEXTLINE(bugprone-reserved-identifier)
#cmakedefine01 HAVE__COMMIT

/* Define to 1 if you have the fileno() function. */
#cmakedefine01 HAVE_FILENO

/* Define to 1 if you have the _fileno() function. */
//NOLINTNEXTLINE(bugprone-reserved-identifier)
#cmakedefine01 HAVE__FILENO

/* Define to 1 if you have the sigaction() function. */
#cmakedefine01 HAVE_SIGACTION

/* Define for the GNU __builtin_clz() function. */
#cmakedefine01 HAVE_BUILTIN_CLZ

/* Define for the GNU __builtin_clzll() function. */
#cmakedefine01 HAVE_BUILTIN_CLZLL

/* Define for the MSVC _BitScanReverse() function. */
#cmakedefine01 HAVE_BITSCANREVERSE

/* Define for the MSVC _BitScanReverse64() function. */
#cmakedefine01 HAVE_BITSCANREVERSE64

/* Define for the IBM xlc++ __cntlz4() function. */
#cmakedefine01 HAVE_CNTLZ4

/* Define for the IBM xlc++ __cntlz8() function. */
#cmakedefine01 HAVE_CNTLZ8

/* Define to 1 if yo have the <unistd.h> header file. */
#cmakedefine HAVE_UNISTD_H
#  ifdef __APPLE__
// Mac OS 13.x has a bug where dispatch.h generates an error for OpenCL builds if
// HAVE_UNISTD_H is merely defined, but not set to 1. Since unistd.h should always
// be available on this platform we simply undefine and redefine it to 1 for now
#    undef  HAVE_UNISTD_H
#    define HAVE_UNISTD_H 1
#endif

/* Define to 1 if yo have the <pwd.h> header file. */
#cmakedefine01 HAVE_PWD_H

/* Define to 1 if yo have the <dirent.h> header file. */
#cmakedefine01 HAVE_DIRENT_H

/* Define to 1 if you have the <sys/time.h> header file. */
#cmakedefine HAVE_SYS_TIME_H

/* Define to 1 if you have the <sched.h> header */
#cmakedefine HAVE_SCHED_H

/* Define to 1 if mm_malloc.h is present, otherwise 0 */
#cmakedefine01 HAVE_MM_MALLOC_H

/* Define to 1 if malloc.h is present, otherwise 0 */
#cmakedefine01 HAVE_MALLOC_H

/* Define to 1 if xmmintrin.h is present, otherwise 0 */
#cmakedefine01 HAVE_XMMINTRIN_H

/* Define to 1 if you have the sysconf() function */
#cmakedefine HAVE_SYSCONF

/* Define to 1 if you have the all the affinity functions in sched.h */
#cmakedefine01 HAVE_SCHED_AFFINITY

/* Define to 1 if _mm_malloc() is present in either mm_malloc.h,
 * malloc.h or xmmintrin.h, and 0 otherwise. Note that you need to
 * conditionally include the three headers too before using _mm_malloc().
 */
//NOLINTNEXTLINE(bugprone-reserved-identifier)
#cmakedefine01 HAVE__MM_MALLOC

/* Define if SIGUSR1 is present */
#cmakedefine01 HAVE_SIGUSR1

/* Enable gromacs quotes */
#cmakedefine01 GMX_COOL_QUOTES

/* default name mangling maybe wrong on exotic plattforms */
#define F77_FUNC(name,NAME) name ## _

/* Define if we have pipes */
#cmakedefine01 HAVE_PIPES

/* Define if we have feenableexcept */
#cmakedefine01 HAVE_FEENABLEEXCEPT

/* Define if we have fedisableexcept */
#cmakedefine01 HAVE_FEDISABLEEXCEPT

/* Define if we have MKL available */
#cmakedefine01 HAVE_LIBMKL

// Describes the origin of BLAS routines
#define GMX_DESCRIBE_BLAS "@GMX_DESCRIBE_BLAS@"

// Describes the origin of LAPACK routines
#define GMX_DESCRIBE_LAPACK "@GMX_DESCRIBE_LAPACK@"

/* Define if we have lmfit support */
#cmakedefine01 HAVE_LMFIT

/* Define if we have muparser support */
#cmakedefine01 HAVE_MUPARSER

/* Define if we are building with Colvars */
#cmakedefine01 GMX_HAVE_COLVARS

/* Define if we are building with Torch */
#cmakedefine01 GMX_TORCH

/* Build using clang analyzer */
#cmakedefine01 GMX_CLANG_ANALYZER

/* Use Interactive Molecular Dynamics */
#cmakedefine01 GMX_IMD

/* Enable vectorization of the 1x1 non-SIMD non-bonded kernel */
#cmakedefine01 GMX_ENABLE_NBNXM_CPU_VECTORIZATION

/*! \endcond */

#endif
