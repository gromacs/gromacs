/* ## */
/* ## This file is part of the GROMACS molecular simulation package. */
/* ## */
/* ## Copyright (c) 2012, by the GROMACS development team, led by */
/* ## David van der Spoel, Berk Hess, Erik Lindahl, and including many */
/* ## others, as listed in the AUTHORS file in the top-level source */
/* ## directory and at http://www.gromacs.org. */
/* ## */
/* ## GROMACS is free software; you can redistribute it and/or */
/* ## modify it under the terms of the GNU Lesser General Public License */
/* ## as published by the Free Software Foundation; either version 2.1 */
/* ## of the License, or (at your option) any later version. */
/* ## */
/* ## GROMACS is distributed in the hope that it will be useful, */
/* ## but WITHOUT ANY WARRANTY; without even the implied warranty of */
/* ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU */
/* ## Lesser General Public License for more details. */
/* ## */
/* ## You should have received a copy of the GNU Lesser General Public */
/* ## License along with GROMACS; if not, see */
/* ## http://www.gnu.org/licenses, or write to the Free Software Foundation, */
/* ## Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA. */
/* ## */
/* ## If you want to redistribute modifications to GROMACS, please */
/* ## consider that scientific software is very special. Version */
/* ## control is crucial - bugs must be traceable. We will be happy to */
/* ## consider code for inclusion in the official distribution, but */
/* ## derived work must not be called official GROMACS. Details are found */
/* ## in the README & COPYING files - if they are missing, get the */
/* ## official version at http://www.gromacs.org. */
/* ## */
/* ## To help us fund GROMACS development, we humbly ask that you cite */
/* ## the research papers on the package. Check out http://www.gromacs.org. */
/* ## */
/* #if 0 */
#error This file must be processed with the Gromacs pre-preprocessor
/* #endif */
/* #if INCLUDE_HEADER */
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <math.h>

#include "../nb_kernel.h"
#include "types/simple.h"
#include "vec.h"
#include "nrnb.h"

#include "gmx_math_ibm_qpx.h"

#include "kernelutil_ibm_qpx.h"
/* #endif */

/* ## List of variables set by the generating script:                                    */
/* ##                                                                                    */
/* ## Setttings that apply to the entire kernel:                                         */
/* ## KERNEL_ELEC:           String, choice for electrostatic interactions               */
/* ## KERNEL_VDW:            String, choice for van der Waals interactions               */
/* ## KERNEL_NAME:           String, name of this kernel                                 */
/* ## KERNEL_VF:             String telling if we calculate potential, force, or both    */
/* ## GEOMETRY_I/GEOMETRY_J: String, name of each geometry, e.g. 'Water3' or '1Particle' */
/* ##                                                                                    */
/* ## Setttings that apply to particles in the outer (I) or inner (J) loops:             */
/* ## PARTICLES_I[]/         Arrays with lists of i/j particles to use in kernel. It is  */
/* ## PARTICLES_J[]:         just [0] for particle geometry, but can be longer for water */
/* ## PARTICLES_ELEC_I[]/    Arrays with lists of i/j particle that have electrostatics  */
/* ## PARTICLES_ELEC_J[]:    interactions that should be calculated in this kernel.      */
/* ## PARTICLES_VDW_I[]/     Arrays with the list of i/j particle that have VdW          */
/* ## PARTICLES_VDW_J[]:     interactions that should be calculated in this kernel.      */
/* ##                                                                                    */
/* ## Setttings for pairs of interactions (e.g. 2nd i particle against 1st j particle)   */
/* ## PAIRS_IJ[]:            Array with (i,j) tuples of pairs for which interactions     */
/* ##                        should be calculated in this kernel. Zero-charge particles  */
/* ##                        do not have interactions with particles without vdw, and    */
/* ##                        Vdw-only interactions are not evaluated in a no-vdw-kernel. */
/* ## INTERACTION_FLAGS[][]: 2D matrix, dimension e.g. 3*3 for water-water interactions. */
/* ##                        For each i-j pair, the element [I][J] is a list of strings  */
/* ##                        defining properties/flags of this interaction. Examples     */
/* ##                        include 'electrostatics'/'vdw' if that type of interaction  */
/* ##                        should be evaluated, 'rsq'/'rinv'/'rinvsq' if those values  */
/* ##                        are needed, and 'exactcutoff' or 'shift','switch' to        */
/* ##                        decide if the force/potential should be modified. This way  */
/* ##                        we only calculate values absolutely needed for each case.   */

/* ## Calculate the size and offset for (merged/interleaved) table data */

/*
 * Gromacs nonbonded kernel:   {KERNEL_NAME}
 * Electrostatics interaction: {KERNEL_ELEC}
 * VdW interaction:            {KERNEL_VDW}
 * Geometry:                   {GEOMETRY_I}-{GEOMETRY_J}
 * Calculate force/pot:        {KERNEL_VF}
 */
void
{KERNEL_NAME}
                    (t_nblist * gmx_restrict                nlist,
                     rvec * gmx_restrict                    xx,
                     rvec * gmx_restrict                    ff,
                     t_forcerec * gmx_restrict              fr,
                     t_mdatoms * gmx_restrict               mdatoms,
                     nb_kernel_data_t * gmx_restrict        kernel_data,
                     t_nrnb * gmx_restrict                  nrnb)
{
    /* ## Not all variables are used for all kernels, but any optimizing compiler fixes that, */
    /* ## so there is no point in going to extremes to exclude variables that are not needed. */
    /* Suffixes 0,1,2,3 refer to particle indices for waters in the inner or outer loop, or
     * just 0 for non-waters.
     * Suffixes A,B,C,D refer to j loop unrolling done with AVX_128, e.g. for the four different
     * jnr indices corresponding to data put in the four positions in the SIMD register.
     */
    int              i_shift_offset,i_coord_offset,outeriter,inneriter;
    int              j_index_start,j_index_end,jidx,nri,inr,ggid,iidx;
    int              jnrA,jnrB,jnrC,jnrD;
    int              jnrlistA,jnrlistB,jnrlistC,jnrlistD;
    int              j_coord_offsetA,j_coord_offsetB,j_coord_offsetC,j_coord_offsetD;
    int              *iinr,*jindex,*jjnr,*shiftidx,*gid;
    real             rcutoff_scalar;
    real             *shiftvec,*fshift,*x,*f;
    real             *fjptrA,*fjptrB,*fjptrC,*fjptrD;
    real             scratch[4*DIM];
    vector4double    fscal,rcutoff,rcutoff2,jidxall;
    /* #for I in PARTICLES_I */
    int              vdwioffset{I};
    vector4double    ix{I},iy{I},iz{I},fix{I},fiy{I},fiz{I},iq{I},isai{I};
    /* #endfor */
    /* #for J in PARTICLES_J */
    int              vdwjidx{J}A,vdwjidx{J}B,vdwjidx{J}C,vdwjidx{J}D;
    vector4double    jx{J},jy{J},jz{J},fjx{J},fjy{J},fjz{J},jq{J},isaj{J};
    /* #endfor */
    /* #for I,J in PAIRS_IJ */
    vector4double    dx{I}{J},dy{I}{J},dz{I}{J},rsq{I}{J},rinv{I}{J},rinvsq{I}{J},r{I}{J},qq{I}{J},c6_{I}{J},c12_{I}{J};
    /* #endfor */
    /* #if KERNEL_ELEC != 'None' */
    vector4double    velec,felec,velecsum,facel,crf,krf,krf2;
    real             *charge;
    /* #endif */
    /* #if 'GeneralizedBorn' in KERNEL_ELEC */
    vector4double    vgb,fgb,vgbsum,dvdasum,gbscale,gbtabscale,isaprod,gbqqfactor,gbinvepsdiff,gbeps,twogbeps,dvdatmp;
    vector4double    minushalf = vec_splats(-0.5);
    real             *invsqrta,*dvda,*gbtab;
    int              gbitab[4] __attribute__((aligned(16)));
    /* #endif */
    /* #if KERNEL_VDW != 'None' */
    int              nvdwtype;
    vector4double    rinvsix,rvdw,vvdw,vvdw6,vvdw12,fvdw,fvdw6,fvdw12,vvdwsum,sh_vdw_invrcut6;
    int              *vdwtype;
    real             *vdwparam;
    vector4double    one_sixth   = vec_splats(1.0/6.0);
    vector4double    one_twelfth = vec_splats(1.0/12.0);
    /* #endif */
    /* #if 'Table' in KERNEL_ELEC or 'GeneralizedBorn' in KERNEL_ELEC or 'Table' in KERNEL_VDW */
    vector4double    rt,vfeps,twovfeps,vftabscale,Y,F,G,H,Fp,VV,FF;
    real             *vftab;
    int              tabstride,taboffset;
    int              vfitab[4] __attribute__((aligned(16)));
    /* #endif */
    /* #if 'Ewald' in KERNEL_ELEC */
    vector4double    ewtabscale,eweps,twoeweps,sh_ewald,ewrt,ewtabhalfspace,ewtabF,ewtabFn,ewtabD,ewtabV;
    vector4double    beta,beta2,beta3,zeta2,pmecorrF,pmecorrV,rinv3;
    real             *ewtab;
    /* #endif */
    /* #if 'PotentialSwitch' in [KERNEL_MOD_ELEC,KERNEL_MOD_VDW] */
    vector4double    rswitch,swV3,swV4,swV5,swF2,swF3,swF4,d,d2,sw,dsw;
    real             rswitch_scalar,d_scalar;
    /* #endif */
    vector4double    dummy_mask,cutoff_mask;
    vector4double    zero    = vec_splats(0.0);
    vector4double    one     = vec_splats(1.0);
    vector4double    two     = vec_splats(2.0);
    x                = xx[0];
    f                = ff[0];

    nri              = nlist->nri;
    iinr             = nlist->iinr;
    jindex           = nlist->jindex;
    jjnr             = nlist->jjnr;
    shiftidx         = nlist->shift;
    gid              = nlist->gid;
    shiftvec         = fr->shift_vec[0];
    fshift           = fr->fshift[0];
    /* #if KERNEL_ELEC != 'None' */
    facel            = vec_splats(fr->epsfac);
    charge           = mdatoms->chargeA;
    /*     #if 'ReactionField' in KERNEL_ELEC */
    krf              = vec_splats(fr->ic->k_rf);
    krf2             = vec_splats(fr->ic->k_rf*2.0);
    crf              = vec_splats(fr->ic->c_rf);
    /*     #endif */
    /* #endif */
    /* #if KERNEL_VDW != 'None' */
    nvdwtype         = fr->ntype;
    vdwparam         = fr->nbfp;
    vdwtype          = mdatoms->typeA;
    /* #endif */

    /* #if 'Table' in KERNEL_ELEC and 'Table' in KERNEL_VDW */
    vftab            = kernel_data->table_elec_vdw->data;
    vftabscale       = vec_splats(kernel_data->table_elec_vdw->scale);
    /* #elif 'Table' in KERNEL_ELEC */
    vftab            = kernel_data->table_elec->data;
    vftabscale       = vec_splats(kernel_data->table_elec->scale);
    /* #elif 'Table' in KERNEL_VDW */
    vftab            = kernel_data->table_vdw->data;
    vftabscale       = vec_splats(kernel_data->table_vdw->scale);
    /* #endif */

    /* #if 'Ewald' in KERNEL_ELEC */
    sh_ewald         = vec_splats(fr->ic->sh_ewald);
    beta             = vec_splats(fr->ic->ewaldcoeff);
    beta2            = vec_mul(beta,beta);
    beta3            = vec_mul(beta,beta2);
    /*     #if KERNEL_VF=='Force' and KERNEL_MOD_ELEC!='PotentialSwitch' */
    ewtab            = fr->ic->tabq_coul_F;
    ewtabscale       = vec_splats(fr->ic->tabq_scale);
    ewtabhalfspace   = vec_splats(0.5/fr->ic->tabq_scale);
    /*     #else */
    ewtab            = fr->ic->tabq_coul_FDV0;
    ewtabscale       = vec_splats(fr->ic->tabq_scale);
    ewtabhalfspace   = vec_splats(0.5/fr->ic->tabq_scale);
     /*     #endif */
    /* #endif */

    /* #if KERNEL_ELEC=='GeneralizedBorn' */
    invsqrta         = fr->invsqrta;
    dvda             = fr->dvda;
    gbtabscale       = vec_splats(fr->gbtab.scale);
    gbtab            = fr->gbtab.data;
    gbinvepsdiff     = vec_splats((1.0/fr->epsilon_r) - (1.0/fr->gb_epsilon_solvent));
    /* #endif */

    /* #if 'Water' in GEOMETRY_I */
    /* Setup water-specific parameters */
    inr              = nlist->iinr[0];
    /*     #for I in PARTICLES_ELEC_I */
    iq{I}              = vec_mul(facel,vec_splats(charge[inr+{I}]));
    /*     #endfor */
    /*     #for I in PARTICLES_VDW_I */
    vdwioffset{I}      = 2*nvdwtype*vdwtype[inr+{I}];
    /*     #endfor */
    /* #endif */

    /* #if 'Water' in GEOMETRY_J */
    /*     #for J in PARTICLES_ELEC_J */
    jq{J}              = vec_splats(charge[inr+{J}]);
    /*     #endfor */
    /*     #for J in PARTICLES_VDW_J */
    vdwjidx{J}A        = 2*vdwtype[inr+{J}];
    /*     #endfor */
    /*     #for I,J in PAIRS_IJ */
    /*         #if 'electrostatics' in INTERACTION_FLAGS[I][J] */
    qq{I}{J}             = vec_mul(iq{I},jq{J});
    /*         #endif */
    /*         #if 'vdw' in INTERACTION_FLAGS[I][J] */
    c6_{I}{J}            = vec_splats(vdwparam[vdwioffset{I}+vdwjidx{J}A]);
    c12_{I}{J}           = vec_splats(vdwparam[vdwioffset{I}+vdwjidx{J}A+1]);
    /*         #endif */
    /*     #endfor */
    /* #endif */

    /* #if KERNEL_MOD_ELEC!='None' or KERNEL_MOD_VDW!='None' */
    /*     #if KERNEL_ELEC!='None' */
    /* When we use explicit cutoffs the value must be identical for elec and VdW, so use elec as an arbitrary choice */
    rcutoff_scalar   = fr->rcoulomb;
    /*     #else */
    rcutoff_scalar   = fr->rvdw;
    /*     #endif */
    rcutoff          = vec_splats(rcutoff_scalar);
    rcutoff2         = vec_mul(rcutoff,rcutoff);
    /* #endif */

    /* #if KERNEL_MOD_VDW=='PotentialShift' */
    sh_vdw_invrcut6  = vec_splats(fr->ic->sh_invrc6);
    rvdw             = vec_splats(fr->rvdw);
    /* #endif */

    /* #if 'PotentialSwitch' in [KERNEL_MOD_ELEC,KERNEL_MOD_VDW] */
    /*     #if KERNEL_MOD_ELEC=='PotentialSwitch'  */
    rswitch_scalar   = fr->rcoulomb_switch;
    rswitch          = vec_splats(rswitch_scalar);
    /*     #else */
    rswitch_scalar   = fr->rvdw_switch;
    rswitch          = vec_splats(rswitch_scalar);
    /*     #endif */
    /* Setup switch parameters */
    d_scalar         = rcutoff_scalar-rswitch_scalar;
    d                = vec_splats(d_scalar);
    swV3             = vec_splats(-10.0/(d_scalar*d_scalar*d_scalar));
    swV4             = vec_splats( 15.0/(d_scalar*d_scalar*d_scalar*d_scalar));
    swV5             = vec_splats( -6.0/(d_scalar*d_scalar*d_scalar*d_scalar*d_scalar));
    /*     #if 'Force' in KERNEL_VF */
    swF2             = vec_splats(-30.0/(d_scalar*d_scalar*d_scalar));
    swF3             = vec_splats( 60.0/(d_scalar*d_scalar*d_scalar*d_scalar));
    swF4             = vec_splats(-30.0/(d_scalar*d_scalar*d_scalar*d_scalar*d_scalar));
    /*     #endif */
    /* #endif */

    /* Avoid stupid compiler warnings */
    jnrA = jnrB = jnrC = jnrD = 0;
    j_coord_offsetA = 0;
    j_coord_offsetB = 0;
    j_coord_offsetC = 0;
    j_coord_offsetD = 0;

    /* ## Keep track of the floating point operations we issue for reporting! */
    /* #define OUTERFLOPS 0 */
    outeriter        = 0;
    inneriter        = 0;

    for(iidx=0;iidx<4*DIM;iidx++)
    {
        scratch[iidx] = 0.0;
    }

    /* Start outer loop over neighborlists */
    for(iidx=0; iidx<nri; iidx++)
    {
        /* Load shift vector for this list */
        i_shift_offset   = DIM*shiftidx[iidx];

        /* Load limits for loop over neighbors */
        j_index_start    = jindex[iidx];
        j_index_end      = jindex[iidx+1];

        /* Get outer coordinate index */
        inr              = iinr[iidx];
        i_coord_offset   = DIM*inr;

        /* Load i particle coords and add shift vector */
        /* #if GEOMETRY_I == 'Particle' */
        gmx_ibm_qpx_load_shift_and_1rvec_broadcast(shiftvec+i_shift_offset,x+i_coord_offset,&ix0,&iy0,&iz0);
        /* #elif GEOMETRY_I == 'Water3' */
        gmx_ibm_qpx_load_shift_and_3rvec_broadcast(shiftvec+i_shift_offset,x+i_coord_offset,
                                                   &ix0,&iy0,&iz0,&ix1,&iy1,&iz1,&ix2,&iy2,&iz2);
        /* #elif GEOMETRY_I == 'Water4' */
        /*     #if 0 in PARTICLES_I                 */
        gmx_ibm_qpx_load_shift_and_4rvec_broadcast(shiftvec+i_shift_offset,x+i_coord_offset,
                                                   &ix0,&iy0,&iz0,&ix1,&iy1,&iz1,&ix2,&iy2,&iz2,&ix3,&iy3,&iz3);
        /*     #else                                */
        gmx_ibm_qpx_load_shift_and_3rvec_broadcast(shiftvec+i_shift_offset,x+i_coord_offset+DIM,
                                                   &ix1,&iy1,&iz1,&ix2,&iy2,&iz2,&ix3,&iy3,&iz3);
        /*     #endif                               */
        /* #endif                                   */

        /* #if 'Force' in KERNEL_VF */
        /*     #for I in PARTICLES_I */
        fix{I}             = zero;
        fiy{I}             = zero;
        fiz{I}             = zero;
        /*     #endfor */
        /* #endif */

        /* ## For water we already preloaded parameters at the start of the kernel */
        /* #if not 'Water' in GEOMETRY_I */
        /* Load parameters for i particles */
        /*     #for I in PARTICLES_ELEC_I */
        iq{I}              = vec_mul(facel,vec_lds(inr+{I},charge));
        /*         #define OUTERFLOPS OUTERFLOPS+1 */
        /*         #if KERNEL_ELEC=='GeneralizedBorn' */
        isai{I}            = vec_lds(inr+{I},invsqrta);
        /*         #endif */
        /*     #endfor */
        /*     #for I in PARTICLES_VDW_I */
        vdwioffset{I}      = 2*nvdwtype*vdwtype[inr+{I}];
        /*     #endfor */
        /* #endif */

        /* #if 'Potential' in KERNEL_VF */
        /* Reset potential sums */
        /*     #if KERNEL_ELEC != 'None' */
        velecsum         = zero;
        /*     #endif */
        /*     #if 'GeneralizedBorn' in KERNEL_ELEC */
        vgbsum           = zero;
        /*     #endif */
        /*     #if KERNEL_VDW != 'None' */
        vvdwsum          = zero;
        /*     #endif */
        /* #endif */
        /*     #if 'GeneralizedBorn' in KERNEL_ELEC and 'Force' in KERNEL_VF */
        dvdasum          = zero;
        /*     #endif */

        /* #for ROUND in ['Loop','Epilogue'] */

        /* #if ROUND =='Loop' */
        /* Start inner kernel loop */
        for(jidx=j_index_start; jidx<j_index_end && jjnr[jidx+3]>=0; jidx+=4)
        {
        /* ## First round is normal loop (next statement resets indentation) */
        /*     #if 0 */
        }
        /*     #endif */
        /* #else */
        if(jidx<j_index_end)
        {
        /* ## Second round is epilogue */
        /* #endif */
        /* #define INNERFLOPS 0 */

            /* Get j neighbor index, and coordinate index */
            /* #if ROUND =='Loop' */
            jnrA             = jjnr[jidx];
            jnrB             = jjnr[jidx+1];
            jnrC             = jjnr[jidx+2];
            jnrD             = jjnr[jidx+3];
            /* #else */
            jnrlistA         = jjnr[jidx];
            jnrlistB         = jjnr[jidx+1];
            jnrlistC         = jjnr[jidx+2];
            jnrlistD         = jjnr[jidx+3];
            /* Sign of each element will be negative for non-real atoms. */
            dummy_mask = vec_ldia(jidx,jjnr);
            jnrA       = (jnrlistA>=0) ? jnrlistA : 0;
            jnrB       = (jnrlistB>=0) ? jnrlistB : 0;
            jnrC       = (jnrlistC>=0) ? jnrlistC : 0;
            jnrD       = (jnrlistD>=0) ? jnrlistD : 0;
            /* #endif */
            j_coord_offsetA  = DIM*jnrA;
            j_coord_offsetB  = DIM*jnrB;
            j_coord_offsetC  = DIM*jnrC;
            j_coord_offsetD  = DIM*jnrD;

            /* load j atom coordinates */
            /* #if GEOMETRY_J == 'Particle'             */
            gmx_ibm_qpx_load_1rvec_4ptr_swizzle(x+j_coord_offsetA,x+j_coord_offsetB,
                                                x+j_coord_offsetC,x+j_coord_offsetD,
                                                &jx0,&jy0,&jz0);
            /* #elif GEOMETRY_J == 'Water3'             */
            gmx_ibm_qpx_load_3rvec_4ptr_swizzle(x+j_coord_offsetA,x+j_coord_offsetB,
                                                x+j_coord_offsetC,x+j_coord_offsetD,
                                                &jx0,&jy0,&jz0,&jx1,&jy1,&jz1,&jx2,&jy2,&jz2);
            /* #elif GEOMETRY_J == 'Water4'             */
            /*     #if 0 in PARTICLES_J                 */
            gmx_ibm_qpx_load_4rvec_4ptr_swizzle(x+j_coord_offsetA,x+j_coord_offsetB,
                                                x+j_coord_offsetC,x+j_coord_offsetD,
                                                &jx0,&jy0,&jz0,&jx1,&jy1,&jz1,&jx2,
                                                &jy2,&jz2,&jx3,&jy3,&jz3);
            /*     #else                                */
            gmx_ibm_qpx_load_3rvec_4ptr_swizzle(x+j_coord_offsetA+DIM,x+j_coord_offsetB+DIM,
                                                x+j_coord_offsetC+DIM,x+j_coord_offsetD+DIM,
                                                &jx1,&jy1,&jz1,&jx2,&jy2,&jz2,&jx3,&jy3,&jz3);
            /*     #endif                               */
            /* #endif                                   */

            /* Calculate displacement vector */
            /* #for I,J in PAIRS_IJ */
            dx{I}{J}             = vec_sub(ix{I},jx{J});
            dy{I}{J}             = vec_sub(iy{I},jy{J});
            dz{I}{J}             = vec_sub(iz{I},jz{J});
            /*     #define INNERFLOPS INNERFLOPS+3 */
            /* #endfor */

            /* Calculate squared distance and things based on it */
            /* #for I,J in PAIRS_IJ */
            rsq{I}{J}            = gmx_ibm_qpx_calc_rsq(dx{I}{J},dy{I}{J},dz{I}{J});
            /*     #define INNERFLOPS INNERFLOPS+5 */
            /* #endfor */

            /* #for I,J in PAIRS_IJ */
            /*     #if 'rinv' in INTERACTION_FLAGS[I][J] */
            rinv{I}{J}           = gmx_ibm_qpx_invsqrt(rsq{I}{J});
            /*         #define INNERFLOPS INNERFLOPS+5 */
            /*     #endif */
            /* #endfor */

            /* #for I,J in PAIRS_IJ */
            /*     #if 'rinvsq' in INTERACTION_FLAGS[I][J] */
            /*         # if 'rinv' not in INTERACTION_FLAGS[I][J] */
            rinvsq{I}{J}         = gmx_ibm_qpx_inv(rsq{I}{J});
            /*             #define INNERFLOPS INNERFLOPS+4 */
            /*         #else */
            rinvsq{I}{J}         = vec_mul(rinv{I}{J},rinv{I}{J});
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*         #endif */
            /*     #endif */
            /* #endfor */

            /* #if not 'Water' in GEOMETRY_J */
            /* Load parameters for j particles */
            /*     #for J in PARTICLES_ELEC_J */
            jq{J}              = gmx_ibm_qpx_load_4real_swizzle(charge+jnrA+{J},charge+jnrB+{J},
                                                                charge+jnrC+{J},charge+jnrD+{J});
            /*         #if KERNEL_ELEC=='GeneralizedBorn' */
            isaj{J}            = gmx_ibm_qpx_load_4real_swizzle(invsqrta+jnrA+{J},invsqrta+jnrB+{J},
                                                                invsqrta+jnrC+{J},invsqrta+jnrD+{J});
            /*         #endif */
            /*     #endfor */
            /*     #for J in PARTICLES_VDW_J */
            vdwjidx{J}A        = 2*vdwtype[jnrA+{J}];
            vdwjidx{J}B        = 2*vdwtype[jnrB+{J}];
            vdwjidx{J}C        = 2*vdwtype[jnrC+{J}];
            vdwjidx{J}D        = 2*vdwtype[jnrD+{J}];
            /*     #endfor */
            /* #endif */

            /* #if 'Force' in KERNEL_VF and not 'Particle' in GEOMETRY_I */
            /*     #for J in PARTICLES_J */
            fjx{J}             = zero;
            fjy{J}             = zero;
            fjz{J}             = zero;
            /*     #endfor */
            /* #endif */

            /* #for I,J in PAIRS_IJ */

            /**************************
             * CALCULATE INTERACTIONS *
             **************************/

            /*     ## Note special check for TIP4P-TIP4P. Since we are cutting of all hydrogen interactions we also cut the LJ-only O-O interaction */
            /*     #if 'exactcutoff' in INTERACTION_FLAGS[I][J] or (GEOMETRY_I=='Water4' and GEOMETRY_J=='Water4' and 'exactcutoff' in INTERACTION_FLAGS[1][1]) */
            /*         ## We always calculate rinv/rinvsq above to enable pipelineing in compilers (performance tested on x86) */
            if (gmx_ibm_qpx_any_lt(rsq{I}{J},rcutoff2))
            {
                /*     #if 0    ## this and the next two lines is a hack to maintain auto-indentation in template file */
            }
            /*         #endif */
            /*         #define INNERFLOPS INNERFLOPS+1 */
            /*     #endif */

            /*     #if 'r' in INTERACTION_FLAGS[I][J] */
            r{I}{J}              = vec_mul(rsq{I}{J},rinv{I}{J});
            /*         #if ROUND == 'Epilogue' */
            r{I}{J}              = vec_sel(zero,r{I}{J},dummy_mask);
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*         #endif */
            /*         #define INNERFLOPS INNERFLOPS+1 */
            /*     #endif */

            /*     ## For water geometries we already loaded parameters at the start of the kernel */
            /*     #if not 'Water' in GEOMETRY_J */
            /* Compute parameters for interactions between i and j atoms */
            /*         #if 'electrostatics' in INTERACTION_FLAGS[I][J] */
            qq{I}{J}             = vec_mul(iq{I},jq{J});
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*         #endif */
            /*         #if 'vdw' in INTERACTION_FLAGS[I][J] */
            gmx_ibm_qpx_load_4pair_swizzle(vdwparam+vdwioffset{I}+vdwjidx{J}A,
                                           vdwparam+vdwioffset{I}+vdwjidx{J}B,
                                           vdwparam+vdwioffset{I}+vdwjidx{J}C,
                                           vdwparam+vdwioffset{I}+vdwjidx{J}D,
                                           &c6_{I}{J},&c12_{I}{J});
            /*         #endif */
            /*     #endif */

            /*     #if 'table' in INTERACTION_FLAGS[I][J] */
            /* Calculate table index by multiplying r with table scale and truncate to integer */
            rt               = vec_mul(r{I}{J},vftabscale);
            vec_sta(vec_ctiw(rt),0,vfitab);
            vfeps            = vec_sub(rt,vec_trunc(rt));
            twovfeps         = vec_add(vfeps,vfeps);
            /*         #define INNERFLOPS INNERFLOPS+4                          */
            /*         #if 'Table' in KERNEL_ELEC and 'Table' in KERNEL_VDW     */
            /*             ## 3 tables, 4 bytes per point: multiply index by 12 */
            tabstride        = 12;
            /*         #elif 'Table' in KERNEL_ELEC                             */
            /*             ## 1 table, 4 bytes per point: multiply index by 4   */
            tabstride        = 4;
            /*         #elif 'Table' in KERNEL_VDW                              */
            /*             ## 2 tables, 4 bytes per point: multiply index by 8  */
            tabstride        = 8;
            /*         #endif                                                   */
            /*     #endif */

            /*     ## ELECTROSTATIC INTERACTIONS */
            /*     #if 'electrostatics' in INTERACTION_FLAGS[I][J] */

            /*         #if KERNEL_ELEC=='Coulomb' */

            /* COULOMB ELECTROSTATICS */
            velec            = vec_mul(qq{I}{J},rinv{I}{J});
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*             #if 'Force' in KERNEL_VF */
            felec            = vec_mul(velec,rinvsq{I}{J});
            /*                 #define INNERFLOPS INNERFLOPS+2 */
            /*             #endif */

            /*         #elif KERNEL_ELEC=='ReactionField' */

            /* REACTION-FIELD ELECTROSTATICS */
            /*             #if 'Potential' in KERNEL_VF */
            velec            = vec_mul(qq{I}{J},vec_sub(vec_madd(krf,rsq{I}{J},rinv{I}{J}),crf));
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            felec            = vec_mul(qq{I}{J},vec_msub(rinv{I}{J},rinvsq{I}{J},krf2));
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */

            /*         #elif KERNEL_ELEC=='GeneralizedBorn' */

            /* GENERALIZED BORN AND COULOMB ELECTROSTATICS */
            isaprod          = vec_mul(isai{I},isaj{J});
            gbqqfactor       = vec_neg(vec_mul(qq{I}{J},vec_mul(isaprod,gbinvepsdiff)));
            gbscale          = vec_mul(isaprod,gbtabscale);
            /*             #define INNERFLOPS INNERFLOPS+5 */

            /* Calculate generalized born table index - this is a separate table from the normal one,
             * but we use the same procedure by multiplying r with scale and truncating to integer.
             */
            rt               = vec_mul(r{I}{J},gbscale);
            vec_sta(vec_ctiw(rt),0,gbitab);
            gbeps            = vec_sub(rt,vec_trunc(rt));

            Y                = vec_lda( 4*gbitab[0], gbtab );
            F                = vec_lda( 4*gbitab[1], gbtab );
            G                = vec_lda( 4*gbitab[2], gbtab );
            H                = vec_lda( 4*gbitab[3], gbtab );
            GMX_IBM_QPX_TRANSPOSE4(Y,F,G,H);
            Fp               = vec_madd(gbeps,vec_madd(gbeps,H,G),F);
            VV               = vec_madd(gbeps,Fp,Y);
            vgb              = vec_mul(gbqqfactor,VV);
            /*             #define INNERFLOPS INNERFLOPS+10 */

            /*             #if 'Force' in KERNEL_VF */
            twogbeps         = vec_add(gbeps,gbeps);
            FF               = vec_madd(vec_madd(twogbeps,H,G),gbeps,Fp);
            fgb              = vec_mul(gbqqfactor,vec_mul(FF,gbscale));
            dvdatmp          = vec_mul(minushalf,vec_madd(fgb,r{I}{J},vgb));
            dvdasum          = vec_add(dvdasum,dvdatmp);
            /*                 #if ROUND == 'Loop' */
            fjptrA           = dvda+jnrA;
            fjptrB           = dvda+jnrB;
            fjptrC           = dvda+jnrC;
            fjptrD           = dvda+jnrD;
            /*                 #else */
            /* The pointers to scratch make sure that this code with compilers that take gmx_restrict seriously (e.g. icc 13) really can't screw things up. */
            fjptrA             = (jnrlistA>=0) ? dvda+jnrA : scratch;
            fjptrB             = (jnrlistB>=0) ? dvda+jnrB : scratch;
            fjptrC             = (jnrlistC>=0) ? dvda+jnrC : scratch;
            fjptrD             = (jnrlistD>=0) ? dvda+jnrD : scratch;
            /*                 #endif */
            gmx_ibm_qpx_increment_4real_swizzle(fjptrA,fjptrB,fjptrC,fjptrD,vec_mul(dvdatmp,vec_mul(isaj{J},isaj{J})));
            /*                 #define INNERFLOPS INNERFLOPS+13 */
            /*             #endif */
            velec            = vec_mul(qq{I}{J},rinv{I}{J});
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #if 'Force' in KERNEL_VF */
            felec            = vec_mul(vec_msub(velec,rinv{I}{J},fgb),rinv{I}{J});
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */

            /*         #elif KERNEL_ELEC=='Ewald' */
            /* EWALD ELECTROSTATICS */

            /* Analytical PME correction */
            zeta2            = vec_mul(beta2,rsq{I}{J});
            /*             #if 'Force' in KERNEL_VF */
            rinv3            = vec_mul(rinvsq{I}{J},rinv{I}{J});
            pmecorrF         = gmx_ibm_qpx_pmecorrF(zeta2);
            felec            = vec_madd(pmecorrF,beta3,rinv3);
            felec            = vec_mul(qq{I}{J},felec);
            /*             #endif */
            /*             #if 'Potential' in KERNEL_VF or KERNEL_MOD_ELEC=='PotentialSwitch' */
            pmecorrV         = gmx_ibm_qpx_pmecorrV(zeta2);
            /*                 #if KERNEL_MOD_ELEC=='PotentialShift' */
            velec            = vec_nmsub(pmecorrV,beta,vec_sub(rinv{I}{J},sh_ewald));
            /*                 #else */
            velec            = vec_nmsub(pmecorrV,beta,rinv{I}{J});
            /*                 #endif */
            velec            = vec_mul(qq{I}{J},velec);
            /*             #endif */

            /*         #elif KERNEL_ELEC=='CubicSplineTable' */

            /* CUBIC SPLINE TABLE ELECTROSTATICS */
            Y                = vec_lda( tabstride*vfitab[0], vftab );
            F                = vec_lda( tabstride*vfitab[1], vftab );
            G                = vec_lda( tabstride*vfitab[2], vftab );
            H                = vec_lda( tabstride*vfitab[3], vftab );
            GMX_IBM_QPX_TRANSPOSE4(Y,F,G,H);
            Fp               = vec_madd(vfeps,vec_madd(H,vfeps,G),F);
            /*             #define INNERFLOPS INNERFLOPS+4 */
            /*             #if 'Potential' in KERNEL_VF */
            VV               = vec_madd(vfeps,Fp,Y);
            velec            = vec_mul(qq{I}{J},VV);
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            FF               = vec_madd(vfeps,vec_madd(twovfeps,H,G),Fp);
            felec            = vec_neg(vec_mul(vec_mul(qq{I}{J},FF),vec_mul(vftabscale,rinv{I}{J})));
            /*                 #define INNERFLOPS INNERFLOPS+7 */
            /*             #endif */
            /*         #endif */
            /*         ## End of check for electrostatics interaction forms */
            /*     #endif */
            /*     ## END OF ELECTROSTATIC INTERACTION CHECK FOR PAIR I-J */

            /*     #if 'vdw' in INTERACTION_FLAGS[I][J] */

            /*         #if KERNEL_VDW=='LennardJones' */

            /* LENNARD-JONES DISPERSION/REPULSION */

            rinvsix          = vec_mul(vec_mul(rinvsq{I}{J},rinvsq{I}{J}),rinvsq{I}{J});
            /*             #define INNERFLOPS INNERFLOPS+2 */
            /*             #if 'Potential' in KERNEL_VF or KERNEL_MOD_VDW=='PotentialSwitch' */
            vvdw6            = vec_mul(c6_{I}{J},rinvsix);
            vvdw12           = vec_mul(c12_{I}{J},vec_mul(rinvsix,rinvsix));
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*                 #if KERNEL_MOD_VDW=='PotentialShift' */
            vvdw             = vec_msub(vec_nmsub(c12_{I}{J},vec_mul(sh_vdw_invrcut6,sh_vdw_invrcut6),vvdw12),one_twelfth,
                                        vec_mul( vec_nmsub(c6_{I}{J},sh_vdw_invrcut6,vvdw6),one_sixth));
            /*                     #define INNERFLOPS INNERFLOPS+8 */
            /*                 #else */
            vvdw             = vec_msub(vvdw12,one_twelfth,vec_mul(vvdw6,one_sixth));
            /*                     #define INNERFLOPS INNERFLOPS+3 */
            /*                 #endif */
            /*                 ## Check for force inside potential check, i.e. this means we already did the potential part */
            /*                 #if 'Force' in KERNEL_VF */
            fvdw             = vec_mul(vec_sub(vvdw12,vvdw6),rinvsq{I}{J});
            /*                     #define INNERFLOPS INNERFLOPS+2 */
            /*                 #endif */
            /*             #elif KERNEL_VF=='Force' */
            /*                 ## Force-only LennardJones makes it possible to save 1 flop (they do add up...) */
            fvdw             = vec_mul(vec_msub(c12_{I}{J},rinvsix,c6_{I}{J}),vec_mul(rinvsix,rinvsq{I}{J}));
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */

            /*         #elif KERNEL_VDW=='CubicSplineTable' */

            /* CUBIC SPLINE TABLE DISPERSION */
            /*             #if 'Table' in KERNEL_ELEC */
            taboffset        = 4;
            /*             #else */
            taboffset        = 0;
            /*             #endif                     */
            Y                = vec_lda( taboffset+tabstride*vfitab[0], vftab );
            F                = vec_lda( taboffset+tabstride*vfitab[1], vftab );
            G                = vec_lda( taboffset+tabstride*vfitab[2], vftab );
            H                = vec_lda( taboffset+tabstride*vfitab[3], vftab );
            GMX_IBM_QPX_TRANSPOSE4(Y,F,G,H);
            Fp               = vec_madd(vfeps,vec_madd(H,vfeps,G),F);
            /*             #define INNERFLOPS INNERFLOPS+4 */
            /*             #if 'Potential' in KERNEL_VF */
            VV               = vec_madd(vfeps,Fp,Y);
            vvdw6            = vec_mul(c6_{I}{J},VV);
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            FF               = vec_madd(vfeps,vec_madd(twovfeps,H,G),Fp);
            fvdw6            = vec_mul(c6_{I}{J},FF);
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */

            /* CUBIC SPLINE TABLE REPULSION */
            taboffset       += 4;
            Y                = vec_lda( taboffset+tabstride*vfitab[0], vftab );
            F                = vec_lda( taboffset+tabstride*vfitab[1], vftab );
            G                = vec_lda( taboffset+tabstride*vfitab[2], vftab );
            H                = vec_lda( taboffset+tabstride*vfitab[3], vftab );
            GMX_IBM_QPX_TRANSPOSE4(Y,F,G,H);
            Fp               = vec_madd(vfeps,vec_madd(H,vfeps,G),F);
            /*             #define INNERFLOPS INNERFLOPS+4 */
            /*             #if 'Potential' in KERNEL_VF */
            VV               = vec_madd(vfeps,Fp,Y);
            vvdw12           = vec_mul(c12_{I}{J},VV);
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            FF               = vec_madd(vfeps,vec_madd(twovfeps,H,G),Fp);
            fvdw12           = vec_mul(c12_{I}{J},FF);
            /*                 #define INNERFLOPS INNERFLOPS+5 */
            /*             #endif */
            /*             #if 'Potential' in KERNEL_VF */
            vvdw             = vec_add(vvdw12,vvdw6);
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            fvdw             = vec_neg(vec_mul(vec_add(fvdw6,fvdw12),vec_mul(vftabscale,rinv{I}{J})));
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */
            /*         #endif */
            /*         ## End of check for vdw interaction forms */
            /*     #endif */
            /*     ## END OF VDW INTERACTION CHECK FOR PAIR I-J */

            /*     #if 'switch' in INTERACTION_FLAGS[I][J] */
            d                = vec_sub(r{I}{J},rswitch);
            d                = vec_sel(zero,d,d); /* max(d,zero) */
            d2               = vec_mul(d,d);
            sw               = vec_add(one,vec_mul(d2,vec_mul(d,vec_madd(d,vec_madd(d,swV5,swV4),swV3))));
            /*         #define INNERFLOPS INNERFLOPS+10 */

            /*         #if 'Force' in KERNEL_VF */
            dsw              = vec_mul(d2,vec_madd(d,vec_madd(d,swF4,swF3),swF2));
            /*             #define INNERFLOPS INNERFLOPS+5 */
            /*         #endif */

            /* Evaluate switch function */
            /*         #if 'Force' in KERNEL_VF */
            /* fscal'=f'/r=-(v*sw)'/r=-(v'*sw+v*dsw)/r=-v'*sw/r-v*dsw/r=fscal*sw-v*dsw/r */
            /*             #if 'electrostatics' in INTERACTION_FLAGS[I][J] and KERNEL_MOD_ELEC=='PotentialSwitch' */
            felec            = vec_msub( felec,sw , vec_mul(rinv{I}{J},vec_mul(velec,dsw)) );
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */
            /*             #if 'vdw' in INTERACTION_FLAGS[I][J] and KERNEL_MOD_VDW=='PotentialSwitch' */
            fvdw             = vec_msub( fvdw,sw , vec_mul(rinv{I}{J},vec_mul(vvdw,dsw)) );
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */
            /*         #endif */
            /*         #if 'Potential' in KERNEL_VF */
            /*             #if 'electrostatics' in INTERACTION_FLAGS[I][J] and KERNEL_MOD_ELEC=='PotentialSwitch' */
            velec            = vec_mul(velec,sw);
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif */
            /*             #if 'vdw' in INTERACTION_FLAGS[I][J] and KERNEL_MOD_VDW=='PotentialSwitch' */
            vvdw             = vec_mul(vvdw,sw);
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif */
            /*         #endif */
            /*     #endif */
            /*     ## Note special check for TIP4P-TIP4P. Since we are cutting of all hydrogen interactions we also cut the LJ-only O-O interaction */
            /*     #if 'exactcutoff' in INTERACTION_FLAGS[I][J] or (GEOMETRY_I=='Water4' and GEOMETRY_J=='Water4' and 'exactcutoff' in INTERACTION_FLAGS[1][1]) */
            cutoff_mask      = _vec_cmplt(rsq{I}{J},rcutoff2);
            /*         #define INNERFLOPS INNERFLOPS+1 */
            /*     #endif */

            /*     #if 'Potential' in KERNEL_VF */
            /* Update potential sum for this i atom from the interaction with this j atom. */
            /*         #if 'electrostatics' in INTERACTION_FLAGS[I][J] */
            /*             #if 'exactcutoff' in INTERACTION_FLAGS[I][J] */
            velec            = vec_sel(zero,velec,cutoff_mask);
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif                                       */
            /*             #if ROUND == 'Epilogue' */
            velec            = vec_sel(zero,velec,dummy_mask);
            /*             #endif */
            velecsum         = vec_add(velecsum,velec);
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*             #if KERNEL_ELEC=='GeneralizedBorn' */
            /*             #if 'exactcutoff' in INTERACTION_FLAGS[I][J] */
            vgb              = vec_sel(zero,vgb,cutoff_mask);
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif                                       */
            /*             #if ROUND == 'Epilogue' */
            vgb              = vec_sel(zero,vgb,dummy_mask);
            /*             #endif */
            vgbsum           = vec_add(vgbsum,vgb);
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif */
            /*         #endif */
            /*         #if 'vdw' in INTERACTION_FLAGS[I][J] */
            /*     ## Note special check for TIP4P-TIP4P. Since we are cutting of all hydrogen interactions we also cut the LJ-only O-O interaction */
            /*     #if 'exactcutoff' in INTERACTION_FLAGS[I][J] or (GEOMETRY_I=='Water4' and GEOMETRY_J=='Water4' and 'exactcutoff' in INTERACTION_FLAGS[1][1]) */
            vvdw             = vec_sel(zero,vvdw,cutoff_mask);
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif                                       */
            /*             #if ROUND == 'Epilogue' */
            vvdw             = vec_sel(zero,vvdw,dummy_mask);
            /*             #endif */
            vvdwsum          = vec_add(vvdwsum,vvdw);
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*         #endif */
            /*     #endif */

            /*     #if 'Force' in KERNEL_VF */

            /*         #if 'electrostatics' in INTERACTION_FLAGS[I][J] and 'vdw' in INTERACTION_FLAGS[I][J] */
            fscal            = vec_add(felec,fvdw);
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*         #elif 'electrostatics' in INTERACTION_FLAGS[I][J] */
            fscal            = felec;
            /*         #elif 'vdw' in INTERACTION_FLAGS[I][J] */
            fscal            = fvdw;
            /*        #endif */

            /*     ## Note special check for TIP4P-TIP4P. Since we are cutting of all hydrogen interactions we also cut the LJ-only O-O interaction */
            /*     #if 'exactcutoff' in INTERACTION_FLAGS[I][J] or (GEOMETRY_I=='Water4' and GEOMETRY_J=='Water4' and 'exactcutoff' in INTERACTION_FLAGS[1][1]) */
            fscal            = vec_sel(zero,fscal,cutoff_mask);
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif                                       */

            /*             #if ROUND == 'Epilogue' */
            fscal            = vec_sel(zero,fscal,dummy_mask);
            /*             #endif */

            /* ## Construction of vectorial force built into FMA instructions now */
            /* #define INNERFLOPS INNERFLOPS+3      */

             /* Update vectorial force */
            fix{I}             = vec_madd(dx{I}{J},fscal,fix{I});
            fiy{I}             = vec_madd(dy{I}{J},fscal,fiy{I});
            fiz{I}             = vec_madd(dz{I}{J},fscal,fiz{I});
            /*             #define INNERFLOPS INNERFLOPS+6 */

            /* #if GEOMETRY_I == 'Particle'             */
            /*     #if ROUND == 'Loop' */
            fjptrA             = f+j_coord_offsetA;
            fjptrB             = f+j_coord_offsetB;
            fjptrC             = f+j_coord_offsetC;
            fjptrD             = f+j_coord_offsetD;
            /*     #else */
            fjptrA             = (jnrlistA>=0) ? f+j_coord_offsetA : scratch;
            fjptrB             = (jnrlistB>=0) ? f+j_coord_offsetB : scratch;
            fjptrC             = (jnrlistC>=0) ? f+j_coord_offsetC : scratch;
            fjptrD             = (jnrlistD>=0) ? f+j_coord_offsetD : scratch;
            /*     #endif */
            gmx_ibm_qpx_decrement_1rvec_4ptr_swizzle(fjptrA,fjptrB,fjptrC,fjptrD,
                                                     vec_mul(dx{I}{J},fscal),
                                                     vec_mul(dy{I}{J},fscal),
                                                     vec_mul(dz{I}{J},fscal));
            /*     #define INNERFLOPS INNERFLOPS+3      */
            /* #else                                    */
            fjx{J}             = vec_madd(dx{I}{J},fscal,fjx{J});
            fjy{J}             = vec_madd(dy{I}{J},fscal,fjy{J});
            fjz{J}             = vec_madd(dz{I}{J},fscal,fjz{J});
            /*     #define INNERFLOPS INNERFLOPS+3      */
            /* #endif                                   */

            /*     #endif */

            /*     ## Note special check for TIP4P-TIP4P. Since we are cutting of all hydrogen interactions we also cut the LJ-only O-O interaction */
            /*     #if 'exactcutoff' in INTERACTION_FLAGS[I][J] or (GEOMETRY_I=='Water4' and GEOMETRY_J=='Water4' and 'exactcutoff' in INTERACTION_FLAGS[1][1]) */
            /*         #if 0    ## This and next two lines is a hack to maintain indentation in template file */
            {
                /*     #endif */
            }
            /*     #endif */
            /*    ## End of check for the interaction being outside the cutoff */

            /* #endfor */
            /* ## End of loop over i-j interaction pairs */

            /* #if GEOMETRY_I != 'Particle' */
            /*     #if ROUND == 'Loop' */
            fjptrA             = f+j_coord_offsetA;
            fjptrB             = f+j_coord_offsetB;
            fjptrC             = f+j_coord_offsetC;
            fjptrD             = f+j_coord_offsetD;
            /*     #else */
            fjptrA             = (jnrlistA>=0) ? f+j_coord_offsetA : scratch;
            fjptrB             = (jnrlistB>=0) ? f+j_coord_offsetB : scratch;
            fjptrC             = (jnrlistC>=0) ? f+j_coord_offsetC : scratch;
            fjptrD             = (jnrlistD>=0) ? f+j_coord_offsetD : scratch;
            /*     #endif */
            /* #endif */

            /* #if 'Water' in GEOMETRY_I and GEOMETRY_J == 'Particle' */
            gmx_ibm_qpx_decrement_1rvec_4ptr_swizzle(fjptrA,fjptrB,fjptrC,fjptrD,fjx0,fjy0,fjz0);
            /* #elif GEOMETRY_J == 'Water3'               */
            gmx_ibm_qpx_decrement_3rvec_4ptr_swizzle(fjptrA,fjptrB,fjptrC,fjptrD,
                                                     fjx0,fjy0,fjz0,fjx1,fjy1,fjz1,fjx2,fjy2,fjz2);
            /*     #define INNERFLOPS INNERFLOPS+9      */
            /* #elif GEOMETRY_J == 'Water4'             */
            /*     #if 0 in PARTICLES_J                 */
            gmx_ibm_qpx_decrement_4rvec_4ptr_swizzle(fjptrA,fjptrB,fjptrC,fjptrD,
                                                     fjx0,fjy0,fjz0,fjx1,fjy1,fjz1,
                                                     fjx2,fjy2,fjz2,fjx3,fjy3,fjz3);
            /*     #define INNERFLOPS INNERFLOPS+12     */
            /*     #else                                */
            gmx_ibm_qpx_decrement_3rvec_4ptr_swizzle(fjptrA+DIM,fjptrB+DIM,fjptrC+DIM,fjptrD+DIM,
                                                     fjx1,fjy1,fjz1,fjx2,fjy2,fjz2,fjx3,fjy3,fjz3);
            /*     #define INNERFLOPS INNERFLOPS+9      */
            /*     #endif                               */
            /* #endif                                   */

            /* Inner loop uses {INNERFLOPS} flops */
        }

        /* #endfor */

        /* End of innermost loop */

        /* #if 'Force' in KERNEL_VF */
        /*     #if GEOMETRY_I == 'Particle'            */
        gmx_ibm_qpx_update_iforce_1atom_swizzle(fix0,fiy0,fiz0,
                                                f+i_coord_offset,fshift+i_shift_offset);
        /*         #define OUTERFLOPS OUTERFLOPS+6     */
        /*     #elif GEOMETRY_I == 'Water3'            */
        gmx_ibm_qpx_update_iforce_3atom_swizzle(fix0,fiy0,fiz0,fix1,fiy1,fiz1,fix2,fiy2,fiz2,
                                                f+i_coord_offset,fshift+i_shift_offset);
        /*         #define OUTERFLOPS OUTERFLOPS+18    */
        /*     #elif GEOMETRY_I == 'Water4'            */
        /*         #if 0 in PARTICLES_I                */
        gmx_ibm_qpx_update_iforce_4atom_swizzle(fix0,fiy0,fiz0,fix1,fiy1,fiz1,fix2,fiy2,fiz2,fix3,fiy3,fiz3,
                                                f+i_coord_offset,fshift+i_shift_offset);
        /*             #define OUTERFLOPS OUTERFLOPS+24    */
        /*         #else                               */
        gmx_ibm_qpx_update_iforce_3atom_swizzle(fix1,fiy1,fiz1,fix2,fiy2,fiz2,fix3,fiy3,fiz3,
                                                f+i_coord_offset+DIM,fshift+i_shift_offset);
        /*             #define OUTERFLOPS OUTERFLOPS+18    */
        /*         #endif                              */
        /*     #endif                                  */
        /* #endif                                      */

        /* #if 'Potential' in KERNEL_VF */
        ggid                        = gid[iidx];
        /* Update potential energies */
        /*     #if KERNEL_ELEC != 'None' */
        gmx_ibm_qpx_update_1pot(velecsum,kernel_data->energygrp_elec+ggid);
        /*         #define OUTERFLOPS OUTERFLOPS+1 */
        /*     #endif */
        /*     #if 'GeneralizedBorn' in KERNEL_ELEC */
        gmx_ibm_qpx_update_1pot(vgbsum,kernel_data->energygrp_polarization+ggid);
        /*         #define OUTERFLOPS OUTERFLOPS+1 */
        /*     #endif */
        /*     #if KERNEL_VDW != 'None' */
        gmx_ibm_qpx_update_1pot(vvdwsum,kernel_data->energygrp_vdw+ggid);
        /*         #define OUTERFLOPS OUTERFLOPS+1 */
        /*     #endif */
        /* #endif */
        /*     #if 'GeneralizedBorn' in KERNEL_ELEC and 'Force' in KERNEL_VF */
        dvdasum = vec_mul(dvdasum, vec_mul(isai{I},isai{I}));
        gmx_ibm_qpx_update_1pot(dvdasum,dvda+inr);
        /*     #endif */

        /* Increment number of inner iterations */
        inneriter                  += j_index_end - j_index_start;

        /* Outer loop uses {OUTERFLOPS} flops */
    }

    /* Increment number of outer iterations */
    outeriter        += nri;

    /* Update outer/inner flops */
    /* ## NB: This is not important, it just affects the flopcount. However, since our preprocessor is */
    /* ## primitive and replaces aggressively even in strings inside these directives, we need to      */
    /* ## assemble the main part of the name (containing KERNEL/ELEC/VDW) directly in the source.      */
    /* #if GEOMETRY_I == 'Water3'            */
    /*     #define ISUFFIX '_W3'             */
    /* #elif GEOMETRY_I == 'Water4'          */
    /*     #define ISUFFIX '_W4'             */
    /* #else                                 */
    /*     #define ISUFFIX ''                */
    /* #endif                                */
    /* #if GEOMETRY_J == 'Water3'            */
    /*     #define JSUFFIX 'W3'              */
    /* #elif GEOMETRY_J == 'Water4'          */
    /*     #define JSUFFIX 'W4'              */
    /* #else                                 */
    /*     #define JSUFFIX ''                */
    /* #endif                                */
    /* #if 'PotentialAndForce' in KERNEL_VF  */
    /*     #define VFSUFFIX  '_VF'           */
    /* #elif 'Potential' in KERNEL_VF        */
    /*     #define VFSUFFIX '_V'             */
    /* #else                                 */
    /*     #define VFSUFFIX '_F'             */
    /* #endif                                */

    /* #if KERNEL_ELEC != 'None' and KERNEL_VDW != 'None' */
    inc_nrnb(nrnb,eNR_NBKERNEL_ELEC_VDW{ISUFFIX}{JSUFFIX}{VFSUFFIX},outeriter*{OUTERFLOPS} + inneriter*{INNERFLOPS});
    /* #elif KERNEL_ELEC != 'None' */
    inc_nrnb(nrnb,eNR_NBKERNEL_ELEC{ISUFFIX}{JSUFFIX}{VFSUFFIX},outeriter*{OUTERFLOPS} + inneriter*{INNERFLOPS});
    /* #else */
    inc_nrnb(nrnb,eNR_NBKERNEL_VDW{ISUFFIX}{JSUFFIX}{VFSUFFIX},outeriter*{OUTERFLOPS} + inneriter*{INNERFLOPS});
    /* #endif  */
}
