/*
 * This file is part of the GROMACS molecular simulation package.
 *
 * Copyright (c) 1991-2000, University of Groningen, The Netherlands.
 * Copyright (c) 2001-2008, The GROMACS development team.
 * Copyright (c) 2013,2014,2015,2016, by the GROMACS development team, led by
 * Mark Abraham, David van der Spoel, Berk Hess, and Erik Lindahl,
 * and including many others, as listed in the AUTHORS file in the
 * top-level source directory and at http://www.gromacs.org.
 *
 * GROMACS is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * GROMACS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with GROMACS; if not, see
 * http://www.gnu.org/licenses, or write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.
 *
 * If you want to redistribute modifications to GROMACS, please
 * consider that scientific software is very special. Version
 * control is crucial - bugs must be traceable. We will be happy to
 * consider code for inclusion in the official distribution, but
 * derived work must not be called official GROMACS. Details are found
 * in the README & COPYING files - if they are missing, get the
 * official version at http://www.gromacs.org.
 *
 * To help us fund GROMACS development, we humbly ask that you cite
 * the research papers on the package. Check out http://www.gromacs.org.
 */
#include "gmxpre.h"

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include <string>

#include "gromacs/fileio/confio.h"
#include "gromacs/gmxlib/network.h"
#include "gromacs/gmxlib/nrnb.h"
#include "gromacs/math/units.h"
#include "gromacs/math/vec.h"
#include "gromacs/mdlib/force.h"
#include "gromacs/mdlib/ns.h"
#include "gromacs/mdlib/qmmm.h"
#include "gromacs/mdtypes/md_enums.h"
#include "gromacs/utility/fatalerror.h"
#include "gromacs/utility/smalloc.h"

/* ORCA interface routines */

void init_orca(t_QMrec *qm)
{
    const char * envOrcaPath = getenv("GMX_ORCA_PATH");

    if (!envOrcaPath)
    {
        gmx_fatal(FARGS, "$GMX_ORCA_PATH not set, check manual\n");
    }

    strdup(qm->orca_dir,envOrcaPath);

    const char * envOrcaBasename = getenv("GMX_QM_ORCA_BASENAME");

    if (!envOrcaBasename)
    {
        gmx_fatal(FARGS, "$GMX_QM_ORCA_BASENAME is not set\n");
    }

    strdup(qm->orca_basename,envOrcaBasename);

    std::string fileName(envOrcaBasename);
    fileName += ".out";
    remove(fileName.c_str());

    fprintf(stderr, "Setting ORCA path to %s\n", qm->orca_dir);
    fprintf(stderr, "ORCA initialised.\n\n");
}


void write_orca_input(t_forcerec *fr, t_QMrec *qm, t_MMrec *mm)
{
    int        i, orca_b_length;              /* length of the orca basename */
    FILE      *out, *iofile;                  /* besides the out, only one file handle is
                                               * being used at a time
                                               */
    char       buf[STRLEN];
    t_QMMMrec *QMMMrec      = fr->qr;

    std::string fileBaseName(qm->orca_basename);

    // write the first part of the input-file
    std::string fileName = fileBaseName + ".inp";
    if ( (out = fopen(fileName.c_str(), "w")) == NULL)
    {
        gmx_fatal(FARGS, "Cannot open ORCA input (%s) for writing.", filename);
    }
    fprintf(out, "#input-file generated by GROMACS\n");

    if (qm->bTS)
    {
        fprintf(out, "!QMMMOpt TightSCF\n");
        fprintf(out, "%s\n", "%geom TS_Search EF end");
    }
    else if (qm->bOPT)
    {
        fprintf(out, "!QMMMOpt TightSCF\n");
    }
    else
    {
        fprintf(out, "!EnGrad TightSCF\n");
    }

    /* here we include the additional orca-input */
    fileName = fileBaseName + ".ORCAINFO";
    if ( (iofile = fopen(fileName.c_str(), "r")) == NULL)
    {
        gmx_fatal(FARGS,"No information on the calculation given in %s.", filename);
    }
    while (!feof(iofile))
    {
        if (fgets(buf, STRLEN, iofile) != NULL)
        {
            fputs(buf, out);
        }
    }
    fclose(iofile);

    if (qm->bTS || qm->bOPT)
    {
        /* freeze the frontier QM atoms and Link atoms. This is
         * important only if a full QM subsystem optimization is done
         * with a frozen MM environmeent. For dynamics, or gromacs's own
         * optimization routines this is not important.
         */
        /* ORCA reads the exclusions from LJCoeffFilename.Excl,
         * so we have to rename the file
         */
        int didStart = 0;
        for (i = 0; i < qm->nrQMatoms; i++)
        {
            if (qm->frontatoms[i])
            {
                if (!didStart)
                {
                    fprintf(out, "%s\n", "%geom");
                    fprintf(out, "   Constraints \n");
                    didStart = 1;
                }
                fprintf(out, "        {C %d C}\n", i); /* counting from 0 */
            }
        }
        if (didStart)
        {
            fprintf(out, "     end\n   end\n");
        }

        /* make a file with information on the C6 and C12 coefficients */
        if (QMMMrec->QMMMscheme != eQMMMschemeoniom && mm->nrMMatoms)
        {
            fileName = fileBaseName + ".LJ.Excl";
            rename("QMMMexcl.dat", fileName.c_str());
            /* make a file with information on the C6 and C12 coefficients */
            fileName = fileBaseName + ".LJ";
            iofile = fopen(fileName.c_str(), "w");
            fprintf(iofile, "%d\n", qm->nrQMatoms);
            for (i = 0; i < qm->nrQMatoms; i++)
            {
                fprintf(iofile,"%10.7f  %10.7f\n",qm->c6[i], qm->c12[i]);
            }
            fprintf(iofile, "%d\n", mm->nrMMatoms);
            for (i = 0; i < mm->nrMMatoms; i++)
            {
                fprintf(iofile,"%10.7f  %10.7f\n",mm->c6[i], mm->c12[i]);
            }
            fclose(iofile);
            /* let ORCA know where LJ coeffs are */
            fprintf(out, "%s%s%s\n", "%LJCOEFFICIENTS \"", filename, "\"");
        }
    }

    /* write charge and multiplicity */
    fprintf(out, "*xyz %2d%2d\n", qm->QMcharge, qm->multiplicity);

    /* write the QM coordinates */
    for (i = 0; i < qm->nrQMatoms; i++)
    {
        int atomNr;
        if (qm->atomicnumberQM[i] == 0)
        {
            atomNr = 1;
        }
        else
        {
            atomNr = qm->atomicnumberQM[i];
        }
        fprintf(out,"%3d %10.7f  %10.7f  %10.7f\n",
                atomNr,
                qm->xQM[i][XX]/0.1,
                qm->xQM[i][YY]/0.1,
                qm->xQM[i][ZZ]/0.1);
    }
    fprintf(out, "*\n");

    /* write the MM point charge data */
    if (QMMMrec->QMMMscheme != eQMMMschemeoniom && mm->nrMMatoms)
    {
        /* name of the point charge file */
        fileName = fileBaseName + ".pc";
        iofile = fopen(fileName.c_str(), "w");
        fprintf(iofile, "%d\n", mm->nrMMatoms);
        for (i = 0; i < mm->nrMMatoms; i++)
        {
            fprintf(iofile,"%8.4f %10.7f  %10.7f  %10.7f\n",
                    mm->MMcharges[i],
                    mm->xMM[i][XX]/0.1,
                    mm->xMM[i][YY]/0.1,
                    mm->xMM[i][ZZ]/0.1);
        }
        fprintf(iofile, "\n");
        fclose(iofile);
        /* let ORCA know where the point charges are */
        fprintf(out, "%s%s%s\n", "%pointcharges \"", filename, "\"");
    }
    fprintf(out, "\n");

    fclose(out);
}

real read_orca_output(rvec QMgrad[], rvec MMgrad[], t_forcerec *fr,
                      t_QMrec *qm, t_MMrec *mm)
{
    int         i, j, orca_b_length;
    char        buf[STRLEN];
    const char  unexpectedEndOfOutput[] = "Unexpected end of ORCA output";
    real        QMener;
    FILE       *ifile; /* one input file a time */
    t_QMMMrec  *QMMMrec = fr->qr;

    std::string fileBaseName(qm->orca_basename);
    std::string fileName;

    /* in case of an optimization, the coordinates are printed in the
     * xyz file, the energy and gradients for the QM part are stored in
     * the engrad file and the gradients for the point charges are stored in
     * the pc file.
     */

    /* we need the new xyz coordinates of the QM atoms only for separate
     *  QM-optimization.
     */

    if (qm->bTS || qm->bOPT)
    {
        fileName = fileBaseName + ".xyz";
        ifile = fopen(fileName.c_str(), "r");

        for (i = 0; i < 2; i++) /* skip first 2 lines */
        {
            if (fgets(buf, STRLEN, ifile) == NULL)
            {
                gmx_fatal(FARGS, unexpectedEndOfOutput);
            }
        }

        for (i = 0; i < qm->nrQMatoms; i++)
        {
            // one step file input, no need for a buffer
            if (fscanf(ifile,"%s%f%f%f",
                       buf, /* atom number, not used */
                       &qm->xQM[i][XX],
                       &qm->xQM[i][YY],
                       &qm->xQM[i][ZZ]) != 4) /* process 4 entries or die */
            {
                gmx_fatal(FARGS, unexpectedEndOfOutput);
            }
            for (j = 0; j < DIM; j++)
            {
                qm->xQM[i][j] *= 0.1;
            }
        }
        fclose(ifile);
    }

    /* we read the energy and the gradient for the qm-atoms from the engrad file
     */
    fileName = fileBaseName + ".engrad";
    ifile = fopen(fileName.c_str(), "r");
    /* we can skip the first seven lines */
    for (j = 0; j < 7; j++)
    {
        if (fgets(buf, STRLEN, ifile) == NULL)
        {
            gmx_fatal(FARGS, unexpectedEndOfOutput);
        }
    }
    /* now comes the energy */
    if (fscanf(ifile,"%f",&QMener) != 1)
    {
        gmx_fatal(FARGS, err_msg1);
    }
    /* skip EOL from the last fscanf-ed line + the next three lines */
    for (j = 0; j < 4; j++)
    {
        if (fgets(buf, STRLEN, ifile) == NULL)
        {
            gmx_fatal(FARGS, unexpectedEndOfOutput);
        }
    }
    /* next lines contain the gradients of the QM atoms
     * now comes the gradient, one value per line:
     * (atom1 x \n atom1 y \n atom1 z \n atom2 x ...
     */

    for (i = 0; i < qm->nrQMatoms; i++)
    {
        if (fscanf(ifile,"%f%f%f",
                   &QMgrad[i][XX],
                   &QMgrad[i][YY],
                   &QMgrad[i][ZZ]) != 3)
        {
            gmx_fatal(FARGS, unexpectedEndOfOutput);
        }

    }
    fclose(ifile);

    /* read the MM point charge data */
    if (QMMMrec->QMMMscheme != eQMMMschemeoniom && mm->nrMMatoms)
    {
        fileName = fileBaseName + ".pcgrad";
        ifile = fopen(fileName.c_str(), "r");

        /* we read the gradient for the mm-atoms from the pcgrad file */
        /* we can skip the first line  */
        if (fgets(buf, STRLEN, ifile) == NULL)
        {
            gmx_fatal(FARGS, unexpectedEndOfOutput);
        }
        for (i = 0; i < mm->nrMMatoms; i++)
        {
            if (fscanf(ifile,"%f%f%f",
                       &MMgrad[i][XX],
                       &MMgrad[i][YY],
                       &MMgrad[i][ZZ]) != 3)
            {
                gmx_fatal(FARGS, unexpectedEndOfOutput);
            }
        }
        fclose(ifile);
    }
    return QMener;
}

void do_orca(char *orca_dir, char *basename)
{

    /* make the call to the orca binary through system()
     * The location of the binary is set through the
     * environment.
     */
    char *buf;
    int   length = strlen(orca_dir) + strlen(basename)*2 + 20;

    std::string systemCommand = orca_dir + "/orca " + basename + ".inp >> " + basename ".out";

    fprintf(stderr, "Executing '%s'\n", systemCommand);
    if (system(systemCommand) != 0)
    {
        gmx_fatal(FARGS, "System call '%s' failed\n", systemCommand);
    }
}

real call_orca(t_forcerec *fr, t_QMrec *qm, t_MMrec *mm, rvec f[],
               rvec fshift[])
{
    /* normal orca jobs */
    static int step = 0;
    int        i, j;
    real       QMener;
    rvec      *QMgrad, *MMgrad;

    snew(QMgrad, qm->nrQMatoms); /* mem01 alloc - do not free */
    snew(MMgrad, mm->nrMMatoms); /* mem02 alloc - do not free */

    write_orca_input(fr, qm, mm);
    do_orca(qm->orca_dir, qm->orca_basename);
    QMener = read_orca_output(QMgrad, MMgrad, fr, qm, mm);
    /* put the QMMM forces in the force array and to the fshift
     */
    for (i = 0; i < qm->nrQMatoms; i++)
    {
        for (j = 0; j < DIM; j++)
        {
            f[i][j]      = HARTREE_BOHR2MD*QMgrad[i][j];
            fshift[i][j] = HARTREE_BOHR2MD*QMgrad[i][j];
        }
    }
    for (i = 0; i < mm->nrMMatoms; i++)
    {
        for (j = 0; j < DIM; j++)
        {
            f[i+qm->nrQMatoms][j]      = HARTREE_BOHR2MD*MMgrad[i][j];
            fshift[i+qm->nrQMatoms][j] = HARTREE_BOHR2MD*MMgrad[i][j];
        }
    }
    QMener = QMener*HARTREE2KJ*AVOGADRO;
    step++;
    return QMener;
}


