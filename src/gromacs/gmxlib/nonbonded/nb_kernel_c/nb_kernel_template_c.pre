/* #if 0 */
/*
 * This file is part of the GROMACS molecular simulation package.
 *
 * Copyright (c) 2012,2013,2014,2015,2017,2018, by the GROMACS development team, led by
 * Mark Abraham, David van der Spoel, Berk Hess, and Erik Lindahl,
 * and including many others, as listed in the AUTHORS file in the
 * top-level source directory and at http://www.gromacs.org.
 *
 * GROMACS is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * GROMACS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with GROMACS; if not, see
 * http://www.gnu.org/licenses, or write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.
 *
 * If you want to redistribute modifications to GROMACS, please
 * consider that scientific software is very special. Version
 * control is crucial - bugs must be traceable. We will be happy to
 * consider code for inclusion in the official distribution, but
 * derived work must not be called official GROMACS. Details are found
 * in the README & COPYING files - if they are missing, get the
 * official version at http://www.gromacs.org.
 *
 * To help us fund GROMACS development, we humbly ask that you cite
 * the research papers on the package. Check out http://www.gromacs.org.
 */
#error This file must be processed with the Gromacs pre-preprocessor
/* #endif */
/* #if INCLUDE_HEADER */
#include "gmxpre.h"

#include "config.h"

#include <math.h>

#include "../nb_kernel.h"
#include "gromacs/gmxlib/nrnb.h"
/* #endif */

/* ## List of variables set by the generating script:                                    */
/* ##                                                                                    */
/* ## Setttings that apply to the entire kernel:                                         */
/* ## KERNEL_ELEC:           String, choice for electrostatic interactions               */
/* ## KERNEL_VDW:            String, choice for van der Waals interactions               */
/* ## KERNEL_NAME:           String, name of this kernel                                 */
/* ## KERNEL_VF:             String telling if we calculate potential, force, or both    */
/* ## GEOMETRY_I/GEOMETRY_J: String, name of each geometry, e.g. 'Water3' or '1Particle' */
/* ##                                                                                    */
/* ## Setttings that apply to particles in the outer (I) or inner (J) loops:             */
/* ## PARTICLES_I[]/         Arrays with lists of i/j particles to use in kernel. It is  */
/* ## PARTICLES_J[]:         just [0] for particle geometry, but can be longer for water */
/* ## PARTICLES_ELEC_I[]/    Arrays with lists of i/j particle that have electrostatics  */
/* ## PARTICLES_ELEC_J[]:    interactions that should be calculated in this kernel.      */
/* ## PARTICLES_VDW_I[]/     Arrays with the list of i/j particle that have VdW          */
/* ## PARTICLES_VDW_J[]:     interactions that should be calculated in this kernel.      */
/* ##                                                                                    */
/* ## Setttings for pairs of interactions (e.g. 2nd i particle against 1st j particle)   */
/* ## PAIRS_IJ[]:            Array with (i,j) tuples of pairs for which interactions     */
/* ##                        should be calculated in this kernel. Zero-charge particles  */
/* ##                        do not have interactions with particles without vdw, and    */
/* ##                        Vdw-only interactions are not evaluated in a no-vdw-kernel. */
/* ## INTERACTION_FLAGS[][]: 2D matrix, dimension e.g. 3*3 for water-water interactions. */
/* ##                        For each i-j pair, the element [I][J] is a list of strings  */
/* ##                        defining properties/flags of this interaction. Examples     */
/* ##                        include 'electrostatics'/'vdw' if that type of interaction  */
/* ##                        should be evaluated, 'rsq'/'rinv'/'rinvsq' if those values  */
/* ##                        are needed, and 'exactcutoff' or 'shift','switch' to        */
/* ##                        decide if the force/potential should be modified. This way  */
/* ##                        we only calculate values absolutely needed for each case.   */

/* ## Calculate the size and offset for (merged/interleaved) table data */

/* #if ('CubicSplineTable' in [KERNEL_ELEC,KERNEL_VDW]) or KERNEL_VF=='PotentialAndForce' */
/*     #define TABLE_POINT_SIZE 4 */
/* #else */
/*     #define TABLE_POINT_SIZE 2 */
/* #endif */

/* #if 'Table' in KERNEL_ELEC and 'Table' in KERNEL_VDW */
/*     #define TABLE_NINTERACTIONS 3 */
/*     #define TABLE_VDW_OFFSET TABLE_POINT_SIZE */
/* #elif 'Table' in KERNEL_ELEC */
/*     #define TABLE_NINTERACTIONS 1 */
/* #elif 'Table' in KERNEL_VDW */
/*     #define TABLE_NINTERACTIONS 2 */
/*     #define TABLE_VDW_OFFSET 0 */
/* #else */
/*     #define TABLE_NINTERACTIONS 0 */
/* #endif */

/* #if 'Buckingham' in KERNEL_VDW */
/*   #define NVDWPARAM 3 */
/* #else */
/*   #define NVDWPARAM 2 */
/* #endif */

/*
 * Gromacs nonbonded kernel:   {KERNEL_NAME}
 * Electrostatics interaction: {KERNEL_ELEC}
 * VdW interaction:            {KERNEL_VDW}
 * Geometry:                   {GEOMETRY_I}-{GEOMETRY_J}
 * Calculate force/pot:        {KERNEL_VF}
 */
void
{KERNEL_NAME}
                    (t_nblist                    * gmx_restrict       nlist,
                     rvec                        * gmx_restrict          xx,
                     rvec                        * gmx_restrict          ff,
                     struct t_forcerec           * gmx_restrict          fr,
                     t_mdatoms                   * gmx_restrict     mdatoms,
                     nb_kernel_data_t gmx_unused * gmx_restrict kernel_data,
                     t_nrnb                      * gmx_restrict        nrnb)
{
    /* ## Not all variables are used for all kernels, but any optimizing compiler fixes that, */
    /* ## so there is no point in going to extremes to exclude variables that are not needed. */
    int              i_shift_offset,i_coord_offset,j_coord_offset;
    int              j_index_start,j_index_end;
    int              nri,inr,ggid,iidx,jidx,jnr,outeriter,inneriter;
    real             shX,shY,shZ,tx,ty,tz,fscal,rcutoff,rcutoff2;
    int              *iinr,*jindex,*jjnr,*shiftidx,*gid;
    real             *shiftvec,*fshift,*x,*f;
    /* #for I in PARTICLES_I */
    int              vdwioffset{I};
    real             ix{I},iy{I},iz{I},fix{I},fiy{I},fiz{I},iq{I},isai{I};
    /* #endfor */
    /* #for J in PARTICLES_J */
    int              vdwjidx{J};
    real             jx{J},jy{J},jz{J},fjx{J},fjy{J},fjz{J},jq{J},isaj{J};
    /* #endfor */
    /* #for I,J in PAIRS_IJ */
    real             dx{I}{J},dy{I}{J},dz{I}{J},rsq{I}{J},rinv{I}{J},rinvsq{I}{J},r{I}{J},qq{I}{J},c6_{I}{J},c12_{I}{J},cexp1_{I}{J},cexp2_{I}{J};
    /* #endfor */
    /* #if KERNEL_ELEC != 'None' */
    real             velec,felec,velecsum,facel,crf,krf,krf2;
    real             *charge;
    /* #endif */
    /* #if KERNEL_VDW != 'None' */
    int              nvdwtype;
    real             rinvsix,rvdw,vvdw,vvdw6,vvdw12,fvdw,fvdw6,fvdw12,vvdwsum,br,vvdwexp,sh_vdw_invrcut6;
    int              *vdwtype;
    real             *vdwparam;
    /* #endif */
    /* #if 'Table' in KERNEL_ELEC or 'Table' in KERNEL_VDW */
    int              vfitab;
    real             rt,vfeps,vftabscale,Y,F,Geps,Heps2,Fp,VV,FF;
    real             *vftab;
    /* #endif */
    /* #if 'LJEwald' in KERNEL_VDW */
    /* #for I,J in PAIRS_IJ */
    real             c6grid_{I}{J};
    /* #endfor */
    real             ewclj,ewclj2,ewclj6,ewcljrsq,poly,exponent,sh_lj_ewald;
    real	     *vdwgridparam;
    /* #endif */
    /* #if 'Ewald' in KERNEL_ELEC */
    int              ewitab;
    real             ewtabscale,eweps,sh_ewald,ewrt,ewtabhalfspace;
    real             *ewtab;
    /* #endif */
    /* #if 'PotentialSwitch' in [KERNEL_MOD_ELEC,KERNEL_MOD_VDW] */
    real             rswitch,swV3,swV4,swV5,swF2,swF3,swF4,d,d2,sw,dsw;
    /* #endif */

    x                = xx[0];
    f                = ff[0];

    nri              = nlist->nri;
    iinr             = nlist->iinr;
    jindex           = nlist->jindex;
    jjnr             = nlist->jjnr;
    shiftidx         = nlist->shift;
    gid              = nlist->gid;
    shiftvec         = fr->shift_vec[0];
    fshift           = fr->fshift[0];
    /* #if KERNEL_ELEC != 'None' */
    facel            = fr->ic->epsfac;
    charge           = mdatoms->chargeA;
    /*     #if 'ReactionField' in KERNEL_ELEC */
    krf              = fr->ic->k_rf;
    krf2             = krf*2.0;
    crf              = fr->ic->c_rf;
    /*     #endif */
    /* #endif */
    /* #if KERNEL_VDW != 'None' */
    nvdwtype         = fr->ntype;
    vdwparam         = fr->nbfp;
    vdwtype          = mdatoms->typeA;
    /* #endif */
    /* #if 'LJEwald' in KERNEL_VDW */
    vdwgridparam     = fr->ljpme_c6grid;
    ewclj            = fr->ic->ewaldcoeff_lj;
    sh_lj_ewald	     = fr->ic->sh_lj_ewald;
    ewclj2           = ewclj*ewclj;
    ewclj6           = ewclj2*ewclj2*ewclj2;
    /* #endif */

    /* #if 'Table' in KERNEL_ELEC and 'Table' in KERNEL_VDW */
    vftab            = kernel_data->table_elec_vdw->data;
    vftabscale       = kernel_data->table_elec_vdw->scale;
    /* #elif 'Table' in KERNEL_ELEC */
    vftab            = kernel_data->table_elec->data;
    vftabscale       = kernel_data->table_elec->scale;
    /* #elif 'Table' in KERNEL_VDW */
    vftab            = kernel_data->table_vdw->data;
    vftabscale       = kernel_data->table_vdw->scale;
    /* #endif */

    /* #if 'Ewald' in KERNEL_ELEC */
    sh_ewald         = fr->ic->sh_ewald;
    /*     #if KERNEL_VF=='Force' and KERNEL_MOD_ELEC!='PotentialSwitch' */
    ewtab            = fr->ic->tabq_coul_F;
    ewtabscale       = fr->ic->tabq_scale;
    ewtabhalfspace   = 0.5/ewtabscale;
    /*     #else */
    ewtab            = fr->ic->tabq_coul_FDV0;
    ewtabscale       = fr->ic->tabq_scale;
    ewtabhalfspace   = 0.5/ewtabscale;
     /*     #endif */
    /* #endif */

    /* #if 'Water' in GEOMETRY_I */
    /* Setup water-specific parameters */
    inr              = nlist->iinr[0];
    /*     #for I in PARTICLES_ELEC_I */
    iq{I}              = facel*charge[inr+{I}];
    /*     #endfor */
    /*     #for I in PARTICLES_VDW_I */
    vdwioffset{I}      = {NVDWPARAM}*nvdwtype*vdwtype[inr+{I}];
    /*     #endfor */
    /* #endif */

    /* #if 'Water' in GEOMETRY_J */
    /*     #for J in PARTICLES_ELEC_J */
    jq{J}              = charge[inr+{J}];
    /*     #endfor */
    /*     #for J in PARTICLES_VDW_J */
    vdwjidx{J}         = {NVDWPARAM}*vdwtype[inr+{J}];
    /*     #endfor */
    /*     #for I,J in PAIRS_IJ */
    /*         #if 'electrostatics' in INTERACTION_FLAGS[I][J] */
    qq{I}{J}             = iq{I}*jq{J};
    /*         #endif */
    /*         #if 'vdw' in INTERACTION_FLAGS[I][J] */
    /*             #if 'Buckingham' in KERNEL_VDW */
    c6_{I}{J}            = vdwparam[vdwioffset{I}+vdwjidx{J}];
    cexp1_{I}{J}         = vdwparam[vdwioffset{I}+vdwjidx{J}+1];
    cexp2_{I}{J}         = vdwparam[vdwioffset{I}+vdwjidx{J}+2];
    /*             #elif 'LJEwald' in KERNEL_VDW */
    c6_{I}{J}            = vdwparam[vdwioffset{I}+vdwjidx{J}];
    c12_{I}{J}           = vdwparam[vdwioffset{I}+vdwjidx{J}+1];
    c6grid_{I}{J}        = vdwgridparam[vdwioffset{I}+vdwjidx{J}];
    /*             #else */
    c6_{I}{J}            = vdwparam[vdwioffset{I}+vdwjidx{J}];
    c12_{I}{J}           = vdwparam[vdwioffset{I}+vdwjidx{J}+1];
    /*             #endif */
    /*         #endif */
    /*     #endfor */
    /* #endif */

    /* #if KERNEL_MOD_ELEC!='None' or KERNEL_MOD_VDW!='None' */
    /*     #if KERNEL_ELEC!='None' */
    /* When we use explicit cutoffs the value must be identical for elec and VdW, so use elec as an arbitrary choice */
    rcutoff          = fr->ic->rcoulomb;
    /*     #else */
    rcutoff          = fr->ic->rvdw;
    /*     #endif */
    rcutoff2         = rcutoff*rcutoff;
    /* #endif */

    /* #if KERNEL_MOD_VDW=='PotentialShift' */
    sh_vdw_invrcut6  = fr->ic->sh_invrc6;
    rvdw             = fr->ic->rvdw;
    /* #endif */

    /* #if 'PotentialSwitch' in [KERNEL_MOD_ELEC,KERNEL_MOD_VDW] */
    /*     #if KERNEL_MOD_ELEC=='PotentialSwitch'  */
    rswitch          = fr->ic->rcoulomb_switch;
    /*     #else */
    rswitch          = fr->ic->rvdw_switch;
    /*     #endif */
    /* Setup switch parameters */
    d                = rcutoff-rswitch;
    swV3             = -10.0/(d*d*d);
    swV4             =  15.0/(d*d*d*d);
    swV5             =  -6.0/(d*d*d*d*d);
    /*     #if 'Force' in KERNEL_VF */
    swF2             = -30.0/(d*d*d);
    swF3             =  60.0/(d*d*d*d);
    swF4             = -30.0/(d*d*d*d*d);
    /*     #endif */
    /* #endif */

    /* ## Keep track of the floating point operations we issue for reporting! */
    /* #define OUTERFLOPS 0 */
    /* #define INNERFLOPS 0 */
    outeriter        = 0;
    inneriter        = 0;

    /* Start outer loop over neighborlists */
    for(iidx=0; iidx<nri; iidx++)
    {
        /* Load shift vector for this list */
        i_shift_offset   = DIM*shiftidx[iidx];
        shX              = shiftvec[i_shift_offset+XX];
        shY              = shiftvec[i_shift_offset+YY];
        shZ              = shiftvec[i_shift_offset+ZZ];

        /* Load limits for loop over neighbors */
        j_index_start    = jindex[iidx];
        j_index_end      = jindex[iidx+1];

        /* Get outer coordinate index */
        inr              = iinr[iidx];
        i_coord_offset   = DIM*inr;

        /* Load i particle coords and add shift vector */
        /* ## Loop over i particles, but only include ones that we use - skip e.g. vdw-only sites for elec-only kernel */
        /*     #for I in PARTICLES_I */
        ix{I}              = shX + x[i_coord_offset+DIM*{I}+XX];
        iy{I}              = shY + x[i_coord_offset+DIM*{I}+YY];
        iz{I}              = shZ + x[i_coord_offset+DIM*{I}+ZZ];
        /*     #define OUTERFLOPS OUTERFLOPS+3 */
        /* #endfor */

        /* #if 'Force' in KERNEL_VF */
        /*     #for I in PARTICLES_I */
        fix{I}             = 0.0;
        fiy{I}             = 0.0;
        fiz{I}             = 0.0;
        /*     #endfor */
        /* #endif */

        /* ## For water we already preloaded parameters at the start of the kernel */
        /* #if not 'Water' in GEOMETRY_I */
        /* Load parameters for i particles */
        /*     #for I in PARTICLES_ELEC_I */
        iq{I}              = facel*charge[inr+{I}];
        /*         #define OUTERFLOPS OUTERFLOPS+1 */
        /*     #endfor */
        /*     #for I in PARTICLES_VDW_I */
        vdwioffset{I}      = {NVDWPARAM}*nvdwtype*vdwtype[inr+{I}];
        /*     #endfor */
        /* #endif */

        /* #if 'Potential' in KERNEL_VF */
        /* Reset potential sums */
        /*     #if KERNEL_ELEC != 'None' */
        velecsum         = 0.0;
        /*     #endif */
        /*     #if KERNEL_VDW != 'None' */
        vvdwsum          = 0.0;
        /*     #endif */
        /* #endif */

        /* Start inner kernel loop */
        for(jidx=j_index_start; jidx<j_index_end; jidx++)
        {
            /* Get j neighbor index, and coordinate index */
            jnr              = jjnr[jidx];
            j_coord_offset   = DIM*jnr;

            /* load j atom coordinates */
            /* #for J in PARTICLES_J */
            jx{J}              = x[j_coord_offset+DIM*{J}+XX];
            jy{J}              = x[j_coord_offset+DIM*{J}+YY];
            jz{J}              = x[j_coord_offset+DIM*{J}+ZZ];
            /* #endfor */

            /* Calculate displacement vector */
            /* #for I,J in PAIRS_IJ */
            dx{I}{J}             = ix{I} - jx{J};
            dy{I}{J}             = iy{I} - jy{J};
            dz{I}{J}             = iz{I} - jz{J};
            /*     #define INNERFLOPS INNERFLOPS+3 */
            /* #endfor */

            /* Calculate squared distance and things based on it */
            /* #for I,J in PAIRS_IJ */
            rsq{I}{J}            = dx{I}{J}*dx{I}{J}+dy{I}{J}*dy{I}{J}+dz{I}{J}*dz{I}{J};
            /*     #define INNERFLOPS INNERFLOPS+5 */
            /* #endfor */

            /* #for I,J in PAIRS_IJ */
            /*     #if 'rinv' in INTERACTION_FLAGS[I][J] */
            rinv{I}{J}           = 1.0/sqrt(rsq{I}{J});
            /*         #define INNERFLOPS INNERFLOPS+5 */
            /*     #endif */
            /* #endfor */

            /* #for I,J in PAIRS_IJ */
            /*     #if 'rinvsq' in INTERACTION_FLAGS[I][J] */
            /*         # if 'rinv' not in INTERACTION_FLAGS[I][J] */
            rinvsq{I}{J}         = 1.0/rsq{I}{J};
            /*             #define INNERFLOPS INNERFLOPS+4 */
            /*         #else */
            rinvsq{I}{J}         = rinv{I}{J}*rinv{I}{J};
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*         #endif */
            /*     #endif */
            /* #endfor */

            /* #if not 'Water' in GEOMETRY_J */
            /* Load parameters for j particles */
            /*     #for J in PARTICLES_ELEC_J */
            jq{J}              = charge[jnr+{J}];
            /*     #endfor */
            /*     #for J in PARTICLES_VDW_J */
            vdwjidx{J}         = {NVDWPARAM}*vdwtype[jnr+{J}];
            /*     #endfor */
            /* #endif */

            /* #for I,J in PAIRS_IJ */

            /**************************
             * CALCULATE INTERACTIONS *
             **************************/

	    /*     ## Note special check for TIP4P-TIP4P. Since we are cutting of all hydrogen interactions we also cut the LJ-only O-O interaction */
            /*     #if 'exactcutoff' in INTERACTION_FLAGS[I][J] or (GEOMETRY_I=='Water4' and GEOMETRY_J=='Water4' and 'exactcutoff' in INTERACTION_FLAGS[1][1]) */
            /*         ## We always calculate rinv/rinvsq above to enable pipelineing in compilers (performance tested on x86) */
            if (rsq{I}{J}<rcutoff2)
            {
                /*     #if 0    ## this and the next two lines is a hack to maintain auto-indentation in template file */
            }
            /*         #endif */
            /*     #endif */

            /*     #if 'r' in INTERACTION_FLAGS[I][J] */
            r{I}{J}              = rsq{I}{J}*rinv{I}{J};
            /*         #define INNERFLOPS INNERFLOPS+1 */
            /*     #endif */

            /*     ## For water geometries we already loaded parameters at the start of the kernel */
            /*     #if not 'Water' in GEOMETRY_J */
            /*         #if 'electrostatics' in INTERACTION_FLAGS[I][J] */
            qq{I}{J}             = iq{I}*jq{J};
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*         #endif */
            /*         #if 'vdw' in INTERACTION_FLAGS[I][J] */
            /*             #if KERNEL_VDW=='Buckingham' */
            c6_{I}{J}            = vdwparam[vdwioffset{I}+vdwjidx{J}];
            cexp1_{I}{J}         = vdwparam[vdwioffset{I}+vdwjidx{J}+1];
            cexp2_{I}{J}         = vdwparam[vdwioffset{I}+vdwjidx{J}+2];
	    /*             #elif 'LJEwald' in KERNEL_VDW */
            c6_{I}{J}            = vdwparam[vdwioffset{I}+vdwjidx{J}];
            c12_{I}{J}           = vdwparam[vdwioffset{I}+vdwjidx{J}+1];
            c6grid_{I}{J}        = vdwgridparam[vdwioffset{I}+vdwjidx{J}];
            /*             #else */
            c6_{I}{J}            = vdwparam[vdwioffset{I}+vdwjidx{J}];
            c12_{I}{J}           = vdwparam[vdwioffset{I}+vdwjidx{J}+1];
            /*             #endif */
            /*         #endif */
            /*     #endif */

            /*     #if 'table' in INTERACTION_FLAGS[I][J] */
            /* Calculate table index by multiplying r with table scale and truncate to integer */
            rt               = r{I}{J}*vftabscale;
            vfitab           = rt;
            vfeps            = rt-vfitab;
            vfitab           = {TABLE_NINTERACTIONS}*{TABLE_POINT_SIZE}*vfitab;
            /*         #define INNERFLOPS INNERFLOPS+2 */
            /*     #endif */

            /*     ## ELECTROSTATIC INTERACTIONS */
            /*     #if 'electrostatics' in INTERACTION_FLAGS[I][J] */

            /*         #if KERNEL_ELEC=='Coulomb' */

            /* COULOMB ELECTROSTATICS */
            velec            = qq{I}{J}*rinv{I}{J};
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*             #if 'Force' in KERNEL_VF */
            felec            = velec*rinvsq{I}{J};
            /*                 #define INNERFLOPS INNERFLOPS+2 */
            /*             #endif */

            /*         #elif KERNEL_ELEC=='ReactionField' */

            /* REACTION-FIELD ELECTROSTATICS */
            /*             #if 'Potential' in KERNEL_VF */
            velec            = qq{I}{J}*(rinv{I}{J}+krf*rsq{I}{J}-crf);
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            felec            = qq{I}{J}*(rinv{I}{J}*rinvsq{I}{J}-krf2);
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */

            /*         #elif KERNEL_ELEC=='Ewald' */
            /* EWALD ELECTROSTATICS */

            /* Calculate Ewald table index by multiplying r with scale and truncate to integer */
            ewrt             = r{I}{J}*ewtabscale;
            ewitab           = ewrt;
            eweps            = ewrt-ewitab;
            /*             #define INNERFLOPS INNERFLOPS+2 */
            /*             #if 'Potential' in KERNEL_VF or KERNEL_MOD_ELEC=='PotentialSwitch' */
            ewitab           = 4*ewitab;
            felec            = ewtab[ewitab]+eweps*ewtab[ewitab+1];
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*                 #if KERNEL_MOD_ELEC=='PotentialShift' */
            velec            = qq{I}{J}*((rinv{I}{J}-sh_ewald)-(ewtab[ewitab+2]-ewtabhalfspace*eweps*(ewtab[ewitab]+felec)));
            /*                     #define INNERFLOPS INNERFLOPS+7 */
            /*                 #else */
            velec            = qq{I}{J}*(rinv{I}{J}-(ewtab[ewitab+2]-ewtabhalfspace*eweps*(ewtab[ewitab]+felec)));
            /*                     #define INNERFLOPS INNERFLOPS+6 */
            /*                 #endif */
            /*                 #if 'Force' in KERNEL_VF */
            felec            = qq{I}{J}*rinv{I}{J}*(rinvsq{I}{J}-felec);
            /*                      #define INNERFLOPS INNERFLOPS+3 */
            /*                 #endif */
            /*             #elif KERNEL_VF=='Force' */
            felec            = (1.0-eweps)*ewtab[ewitab]+eweps*ewtab[ewitab+1];
            felec            = qq{I}{J}*rinv{I}{J}*(rinvsq{I}{J}-felec);
            /*                 #define INNERFLOPS INNERFLOPS+7 */
            /*             #endif */

            /*         #elif KERNEL_ELEC=='CubicSplineTable' */

            /* CUBIC SPLINE TABLE ELECTROSTATICS */
            /*             #if 'Potential' in KERNEL_VF */
            Y                = vftab[vfitab];
            /*             #endif */
            F                = vftab[vfitab+1];
            Geps             = vfeps*vftab[vfitab+2];
            Heps2            = vfeps*vfeps*vftab[vfitab+3];
            Fp               = F+Geps+Heps2;
            /*             #define INNERFLOPS INNERFLOPS+5 */
            /*             #if 'Potential' in KERNEL_VF */
            VV               = Y+vfeps*Fp;
            velec            = qq{I}{J}*VV;
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            FF               = Fp+Geps+2.0*Heps2;
            felec            = -qq{I}{J}*FF*vftabscale*rinv{I}{J};
            /*                 #define INNERFLOPS INNERFLOPS+7 */
            /*             #endif */
            /*         #endif */
            /*         ## End of check for electrostatics interaction forms */
            /*     #endif */
            /*     ## END OF ELECTROSTATIC INTERACTION CHECK FOR PAIR I-J */

            /*     #if 'vdw' in INTERACTION_FLAGS[I][J] */

            /*         #if KERNEL_VDW=='LennardJones' */

            /* LENNARD-JONES DISPERSION/REPULSION */

            rinvsix          = rinvsq{I}{J}*rinvsq{I}{J}*rinvsq{I}{J};
            /*             #define INNERFLOPS INNERFLOPS+2 */
            /*             #if 'Potential' in KERNEL_VF or KERNEL_MOD_VDW=='PotentialSwitch' */
            vvdw6            = c6_{I}{J}*rinvsix;
            vvdw12           = c12_{I}{J}*rinvsix*rinvsix;
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*                 #if KERNEL_MOD_VDW=='PotentialShift' */
            vvdw             = (vvdw12 - c12_{I}{J}*sh_vdw_invrcut6*sh_vdw_invrcut6)*(1.0/12.0) - (vvdw6 - c6_{I}{J}*sh_vdw_invrcut6)*(1.0/6.0);
            /*                     #define INNERFLOPS INNERFLOPS+8 */
            /*                 #else */
            vvdw             = vvdw12*(1.0/12.0) - vvdw6*(1.0/6.0);
            /*                     #define INNERFLOPS INNERFLOPS+3 */
            /*                 #endif */
            /*                 ## Check for force inside potential check, i.e. this means we already did the potential part */
            /*                 #if 'Force' in KERNEL_VF */
            fvdw             = (vvdw12-vvdw6)*rinvsq{I}{J};
            /*                     #define INNERFLOPS INNERFLOPS+2 */
            /*                 #endif */
            /*             #elif KERNEL_VF=='Force' */
            /*                 ## Force-only LennardJones makes it possible to save 1 flop (they do add up...) */
            fvdw             = (c12_{I}{J}*rinvsix-c6_{I}{J})*rinvsix*rinvsq{I}{J};
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */

            /*         #elif KERNEL_VDW=='Buckingham' */

            /* BUCKINGHAM DISPERSION/REPULSION */
            rinvsix          = rinvsq{I}{J}*rinvsq{I}{J}*rinvsq{I}{J};
            vvdw6            = c6_{I}{J}*rinvsix;
            br               = cexp2_{I}{J}*r{I}{J};
            vvdwexp          = cexp1_{I}{J}*exp(-br);
            /*             ## Estimate exp() to 25 flops */
            /*             #define INNERFLOPS INNERFLOPS+31 */
            /*             #if 'Potential' in KERNEL_VF or KERNEL_MOD_VDW=='PotentialSwitch'  */
            /*                 #if KERNEL_MOD_VDW=='PotentialShift' */
            vvdw             = (vvdwexp-cexp1_{I}{J}*exp(-cexp2_{I}{J}*rvdw)) - (vvdw6 - c6_{I}{J}*sh_vdw_invrcut6)*(1.0/6.0);
            /*                     #define INNERFLOPS INNERFLOPS+33 */
            /*                  #else */
            vvdw             = vvdwexp - vvdw6*(1.0/6.0);
            /*                     #define INNERFLOPS INNERFLOPS+2 */
            /*                 #endif */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            fvdw             = (br*vvdwexp-vvdw6)*rinvsq{I}{J};
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */

            /*         #elif KERNEL_VDW=='CubicSplineTable' */

            /* CUBIC SPLINE TABLE DISPERSION */
            vfitab          += {TABLE_VDW_OFFSET};
            /*             #if 'Potential' in KERNEL_VF */
            Y                = vftab[vfitab];
            /*             #endif */
            F                = vftab[vfitab+1];
            Geps             = vfeps*vftab[vfitab+2];
            Heps2            = vfeps*vfeps*vftab[vfitab+3];
            Fp               = F+Geps+Heps2;
            /*             #define INNERFLOPS INNERFLOPS+5 */
            /*             #if 'Potential' in KERNEL_VF */
            VV               = Y+vfeps*Fp;
            vvdw6            = c6_{I}{J}*VV;
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            FF               = Fp+Geps+2.0*Heps2;
            fvdw6            = c6_{I}{J}*FF;
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */

            /* CUBIC SPLINE TABLE REPULSION */
            /*             #if 'Potential' in KERNEL_VF */
            Y                = vftab[vfitab+4];
            /*             #endif */
            F                = vftab[vfitab+5];
            Geps             = vfeps*vftab[vfitab+6];
            Heps2            = vfeps*vfeps*vftab[vfitab+7];
            Fp               = F+Geps+Heps2;
            /*             #define INNERFLOPS INNERFLOPS+5 */
            /*             #if 'Potential' in KERNEL_VF */
            VV               = Y+vfeps*Fp;
            vvdw12           = c12_{I}{J}*VV;
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            FF               = Fp+Geps+2.0*Heps2;
            fvdw12           = c12_{I}{J}*FF;
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */
            /*             #if 'Potential' in KERNEL_VF */
            vvdw             = vvdw12+vvdw6;
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif */
            /*             #if 'Force' in KERNEL_VF */
            fvdw             = -(fvdw6+fvdw12)*vftabscale*rinv{I}{J};
            /*                 #define INNERFLOPS INNERFLOPS+4 */
            /*             #endif */

            /*         #elif KERNEL_VDW=='LJEwald' */

            rinvsix          = rinvsq{I}{J}*rinvsq{I}{J}*rinvsq{I}{J};
            ewcljrsq         = ewclj2*rsq{I}{J};
            exponent 	     = exp(-ewcljrsq);
            poly             = exponent*(1.0 + ewcljrsq + ewcljrsq*ewcljrsq*0.5);
            /*             #define INNERFLOPS INNERFLOPS+9 */
            /*             #if 'Potential' in KERNEL_VF or KERNEL_MOD_VDW=='PotentialSwitch' */
            vvdw6            = (c6_{I}{J}-c6grid_{I}{J}*(1.0-poly))*rinvsix;
            vvdw12           = c12_{I}{J}*rinvsix*rinvsix;
            /*                 #define INNERFLOPS INNERFLOPS+6 */
            /*                 #if KERNEL_MOD_VDW=='PotentialShift' */
            vvdw             = (vvdw12 - c12_{I}{J}*sh_vdw_invrcut6*sh_vdw_invrcut6)*(1.0/12.0) - (vvdw6 - c6_{I}{J}*sh_vdw_invrcut6 - c6grid_{I}{J}*sh_lj_ewald)*(1.0/6.0);
            /*                     #define INNERFLOPS INNERFLOPS+9 */
            /*                 #else */
            vvdw             = vvdw12*(1.0/12.0) - vvdw6*(1.0/6.0);
            /*                     #define INNERFLOPS INNERFLOPS+3 */
            /*                 #endif */
            /*                 ## Check for force inside potential check, i.e. this means we already did the potential part */
            /*                 #if 'Force' in KERNEL_VF */
            fvdw             = (vvdw12 - vvdw6 - c6grid_{I}{J}*(1.0/6.0)*exponent*ewclj6)*rinvsq{I}{J};
            /*                     #define INNERFLOPS INNERFLOPS+6 */
            /*                 #endif */
            /*             #elif KERNEL_VF=='Force' */
            /*                 ## Force-only LennardJones makes it possible to save 1 flop (they do add up...) */
            fvdw             = (((c12_{I}{J}*rinvsix - c6_{I}{J} + c6grid_{I}{J}*(1.0-poly))*rinvsix) - c6grid_{I}{J}*(1.0/6.0)*exponent*ewclj6)*rinvsq{I}{J};
            /*                 #define INNERFLOPS INNERFLOPS+11 */
            /*             #endif */
            /*         #endif */
            /*         ## End of check for vdw interaction forms */
            /*     #endif */
            /*     ## END OF VDW INTERACTION CHECK FOR PAIR I-J */

            /*     #if 'switch' in INTERACTION_FLAGS[I][J] */
            d                = r{I}{J}-rswitch;
            d                = (d>0.0) ? d : 0.0;
            d2               = d*d;
            sw               = 1.0+d2*d*(swV3+d*(swV4+d*swV5));
            /*         #define INNERFLOPS INNERFLOPS+9 */

            /*         #if 'Force' in KERNEL_VF */
            dsw              = d2*(swF2+d*(swF3+d*swF4));
            /*             #define INNERFLOPS INNERFLOPS+5 */
            /*         #endif */

            /* Evaluate switch function */
            /*         #if 'Force' in KERNEL_VF */
            /* fscal'=f'/r=-(v*sw)'/r=-(v'*sw+v*dsw)/r=-v'*sw/r-v*dsw/r=fscal*sw-v*dsw/r */
            /*             #if 'electrostatics' in INTERACTION_FLAGS[I][J] and KERNEL_MOD_ELEC=='PotentialSwitch' */
            felec            = felec*sw - rinv{I}{J}*velec*dsw;
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */
            /*             #if 'vdw' in INTERACTION_FLAGS[I][J] and KERNEL_MOD_VDW=='PotentialSwitch' */
            fvdw             = fvdw*sw - rinv{I}{J}*vvdw*dsw;
            /*                 #define INNERFLOPS INNERFLOPS+3 */
            /*             #endif */
            /*         #endif */
            /*         #if 'Potential' in KERNEL_VF */
            /*             #if 'electrostatics' in INTERACTION_FLAGS[I][J] and KERNEL_MOD_ELEC=='PotentialSwitch' */
            velec           *= sw;
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif */
            /*             #if 'vdw' in INTERACTION_FLAGS[I][J] and KERNEL_MOD_VDW=='PotentialSwitch' */
            vvdw            *= sw;
            /*                 #define INNERFLOPS INNERFLOPS+1 */
            /*             #endif */
            /*         #endif */
            /*     #endif */

            /*     #if 'Potential' in KERNEL_VF */
            /* Update potential sums from outer loop */
            /*         #if 'electrostatics' in INTERACTION_FLAGS[I][J] */
            velecsum        += velec;
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*         #endif */
            /*         #if 'vdw' in INTERACTION_FLAGS[I][J] */
            vvdwsum         += vvdw;
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*         #endif */
            /*     #endif */

            /*     #if 'Force' in KERNEL_VF */

            /*         #if 'electrostatics' in INTERACTION_FLAGS[I][J] and 'vdw' in INTERACTION_FLAGS[I][J] */
            fscal            = felec+fvdw;
            /*             #define INNERFLOPS INNERFLOPS+1 */
            /*         #elif 'electrostatics' in INTERACTION_FLAGS[I][J] */
            fscal            = felec;
            /*         #elif 'vdw' in INTERACTION_FLAGS[I][J] */
            fscal            = fvdw;
            /*        #endif */

            /* Calculate temporary vectorial force */
            tx               = fscal*dx{I}{J};
            ty               = fscal*dy{I}{J};
            tz               = fscal*dz{I}{J};

            /* Update vectorial force */
            fix{I}            += tx;
            fiy{I}            += ty;
            fiz{I}            += tz;
            f[j_coord_offset+DIM*{J}+XX] -= tx;
            f[j_coord_offset+DIM*{J}+YY] -= ty;
            f[j_coord_offset+DIM*{J}+ZZ] -= tz;

            /*         #define INNERFLOPS INNERFLOPS+9 */
            /*     #endif */

            /*     ## Note special check for TIP4P-TIP4P. Since we are cutting of all hydrogen interactions we also cut the LJ-only O-O interaction */
            /*     #if 'exactcutoff' in INTERACTION_FLAGS[I][J] or (GEOMETRY_I=='Water4' and GEOMETRY_J=='Water4' and 'exactcutoff' in INTERACTION_FLAGS[1][1]) */
            /*         #if 0    ## This and next two lines is a hack to maintain indentation in template file */
            {
                /*     #endif */
            }
            /*     #endif */
            /*    ## End of check for the interaction being outside the cutoff */

            /* #endfor */
            /* ## End of loop over i-j interaction pairs */

            /* Inner loop uses {INNERFLOPS} flops */
        }
        /* End of innermost loop */

        /* #if 'Force' in KERNEL_VF */
        tx = ty = tz = 0;
        /*     #for I in PARTICLES_I */
        f[i_coord_offset+DIM*{I}+XX] += fix{I};
        f[i_coord_offset+DIM*{I}+YY] += fiy{I};
        f[i_coord_offset+DIM*{I}+ZZ] += fiz{I};
        tx                         += fix{I};
        ty                         += fiy{I};
        tz                         += fiz{I};
        /*         #define OUTERFLOPS OUTERFLOPS+6 */
        /*     #endfor */
        fshift[i_shift_offset+XX]  += tx;
        fshift[i_shift_offset+YY]  += ty;
        fshift[i_shift_offset+ZZ]  += tz;
        /*     #define OUTERFLOPS OUTERFLOPS+3 */
        /* #endif */

        /* #if 'Potential' in KERNEL_VF */
        ggid                        = gid[iidx];
        /* Update potential energies */
        /*     #if KERNEL_ELEC != 'None' */
        kernel_data->energygrp_elec[ggid] += velecsum;
        /*         #define OUTERFLOPS OUTERFLOPS+1 */
        /*     #endif */
        /*     #if KERNEL_VDW != 'None' */
        kernel_data->energygrp_vdw[ggid] += vvdwsum;
        /*         #define OUTERFLOPS OUTERFLOPS+1 */
        /*     #endif */
        /* #endif */

        /* Increment number of inner iterations */
        inneriter                  += j_index_end - j_index_start;

        /* Outer loop uses {OUTERFLOPS} flops */
    }

    /* Increment number of outer iterations */
    outeriter        += nri;

    /* Update outer/inner flops */
    /* ## NB: This is not important, it just affects the flopcount. However, since our preprocessor is */
    /* ## primitive and replaces aggressively even in strings inside these directives, we need to      */
    /* ## assemble the main part of the name (containing KERNEL/ELEC/VDW) directly in the source.      */
    /* #if GEOMETRY_I == 'Water3'            */
    /*     #define ISUFFIX '_W3'             */
    /* #elif GEOMETRY_I == 'Water4'          */
    /*     #define ISUFFIX '_W4'             */
    /* #else                                 */
    /*     #define ISUFFIX ''                */
    /* #endif                                */
    /* #if GEOMETRY_J == 'Water3'            */
    /*     #define JSUFFIX 'W3'              */
    /* #elif GEOMETRY_J == 'Water4'          */
    /*     #define JSUFFIX 'W4'              */
    /* #else                                 */
    /*     #define JSUFFIX ''                */
    /* #endif                                */
    /* #if 'PotentialAndForce' in KERNEL_VF  */
    /*     #define VFSUFFIX  '_VF'           */
    /* #elif 'Potential' in KERNEL_VF        */
    /*     #define VFSUFFIX '_V'             */
    /* #else                                 */
    /*     #define VFSUFFIX '_F'             */
    /* #endif                                */

    /* #if KERNEL_ELEC != 'None' and KERNEL_VDW != 'None' */
    inc_nrnb(nrnb,eNR_NBKERNEL_ELEC_VDW{ISUFFIX}{JSUFFIX}{VFSUFFIX},outeriter*{OUTERFLOPS} + inneriter*{INNERFLOPS});
    /* #elif KERNEL_ELEC != 'None' */
    inc_nrnb(nrnb,eNR_NBKERNEL_ELEC{ISUFFIX}{JSUFFIX}{VFSUFFIX},outeriter*{OUTERFLOPS} + inneriter*{INNERFLOPS});
    /* #else */
    inc_nrnb(nrnb,eNR_NBKERNEL_VDW{ISUFFIX}{JSUFFIX}{VFSUFFIX},outeriter*{OUTERFLOPS} + inneriter*{INNERFLOPS});
    /* #endif  */
}
