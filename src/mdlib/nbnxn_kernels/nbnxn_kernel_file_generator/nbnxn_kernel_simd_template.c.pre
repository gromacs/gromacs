#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "typedefs.h"

#ifdef {0}

{1}
#include "gmx_simd_macros.h"
#include "gmx_simd_vec.h"
{2}
#define GMX_SIMD_J_UNROLL_SIZE {3}
#include "{4}"
#include "../nbnxn_kernel_common.h"
#include "gmx_omp_nthreads.h"
#include "types/force_flags.h"

/*! \brief Kinds of electrostatic treatments in SIMD Verlet kernels
 */
enum {{
    coultRF, coultTAB, coultTAB_TWIN, coultEWALD, coultEWALD_TWIN, coultNR
}};

/* Declare and define the kernel function pointer lookup tables. */
static p_nbk_func_ener p_nbk_ener[coultNR][ljcrNR] =
{7}
static p_nbk_func_ener p_nbk_energrp[coultNR][ljcrNR] =
{8}
static p_nbk_func_noener p_nbk_noener[coultNR][ljcrNR] =
{9}

static void
reduce_group_energies(int ng, int ng_2log,
                      const real *VSvdw, const real *VSc,
                      real *Vvdw, real *Vc)
{{
    const int unrollj      = GMX_SIMD_WIDTH_HERE/GMX_SIMD_J_UNROLL_SIZE;
    const int unrollj_half = unrollj/2;
    int       ng_p2, i, j, j0, j1, c, s;

    ng_p2 = (1<<ng_2log);

    /* The size of the x86 SIMD energy group buffer array is:
     * ng*ng*ng_p2*unrollj_half*simd_width
     */
    for (i = 0; i < ng; i++)
    {{
        for (j = 0; j < ng; j++)
        {{
            Vvdw[i*ng+j] = 0;
            Vc[i*ng+j]   = 0;
        }}

        for (j1 = 0; j1 < ng; j1++)
        {{
            for (j0 = 0; j0 < ng; j0++)
            {{
                c = ((i*ng + j1)*ng_p2 + j0)*unrollj_half*unrollj;
                for (s = 0; s < unrollj_half; s++)
                {{
                    Vvdw[i*ng+j0] += VSvdw[c+0];
                    Vvdw[i*ng+j1] += VSvdw[c+1];
                    Vc  [i*ng+j0] += VSc  [c+0];
                    Vc  [i*ng+j1] += VSc  [c+1];
                    c             += unrollj + 2;
                }}
            }}
        }}
    }}
}}

#else /* {0} */

#include "gmx_fatal.h"

#endif /* {0} */

void
{5}(nbnxn_pairlist_set_t       *nbl_list,
{6}const nbnxn_atomdata_t     *nbat,
{6}const interaction_const_t  *ic,
{6}int                         ewald_excl,
{6}rvec                       *shift_vec,
{6}int                         force_flags,
{6}int                         clearF,
{6}real                       *fshift,
{6}real                       *Vc,
{6}real                       *Vvdw)
#ifdef {0}
{{
    int                nnbl;
    nbnxn_pairlist_t **nbl;
    int                coult;
    int                nb;

    nnbl = nbl_list->nnbl;
    nbl  = nbl_list->nbl;

    if (EEL_RF(ic->eeltype) || ic->eeltype == eelCUT)
    {{
        coult = coultRF;
    }}
    else
    {{
        if (ewald_excl == ewaldexclTable)
        {{
            if (ic->rcoulomb == ic->rvdw)
            {{
                coult = coultTAB;
            }}
            else
            {{
                coult = coultTAB_TWIN;
            }}
        }}
        else
        {{
            if (ic->rcoulomb == ic->rvdw)
            {{
                coult = coultEWALD;
            }}
            else
            {{
                coult = coultEWALD_TWIN;
            }}
        }}
    }}

#pragma omp parallel for schedule(static) num_threads(gmx_omp_nthreads_get(emntNonbonded))
    for (nb = 0; nb < nnbl; nb++)
    {{
        nbnxn_atomdata_output_t *out;
        real                    *fshift_p;

        out = &nbat->out[nb];

        if (clearF == enbvClearFYes)
        {{
            clear_f(nbat, nb, out->f);
        }}

        if ((force_flags & GMX_FORCE_VIRIAL) && nnbl == 1)
        {{
            fshift_p = fshift;
        }}
        else
        {{
            fshift_p = out->fshift;

            if (clearF == enbvClearFYes)
            {{
                clear_fshift(fshift_p);
            }}
        }}

        if (!(force_flags & GMX_FORCE_ENERGY))
        {{
            /* Don't calculate energies */
            p_nbk_noener[coult][nbat->comb_rule](nbl[nb], nbat,
                                                 ic,
                                                 shift_vec,
                                                 out->f,
                                                 fshift_p);
        }}
        else if (out->nV == 1)
        {{
            /* No energy groups */
            out->Vvdw[0] = 0;
            out->Vc[0]   = 0;

            p_nbk_ener[coult][nbat->comb_rule](nbl[nb], nbat,
                                               ic,
                                               shift_vec,
                                               out->f,
                                               fshift_p,
                                               out->Vvdw,
                                               out->Vc);
        }}
        else
        {{
            /* Calculate energy group contributions */
            int i;

            for (i = 0; i < out->nVS; i++)
            {{
                out->VSvdw[i] = 0;
            }}
            for (i = 0; i < out->nVS; i++)
            {{
                out->VSc[i] = 0;
            }}

            p_nbk_energrp[coult][nbat->comb_rule](nbl[nb], nbat,
                                                  ic,
                                                  shift_vec,
                                                  out->f,
                                                  fshift_p,
                                                  out->VSvdw,
                                                  out->VSc);

            reduce_group_energies(nbat->nenergrp, nbat->neg_2log,
                                  out->VSvdw, out->VSc,
                                  out->Vvdw, out->Vc);
        }}
    }}

    if (force_flags & GMX_FORCE_ENERGY)
    {{
        reduce_energies_over_lists(nbat, nnbl, Vvdw, Vc);
    }}
}}
#else
{{
    gmx_incons("{5} called when such kernels "
               " are not enabled.");
}}
#endif
#undef GMX_SIMD_J_UNROLL_SIZE
