
                    Welcome to GROMACS!

*Note*: Detailed, step-by-step installation instructions
are available on the website
http://www.gromacs.org/Downloads/Installation_Instructions.

*Note*: If you want to use CMake for building look at INSTALL.cmake.



You will probably have to download and install FFTW the first
time you install GROMACS - our configuration script will check it!


* SHORT INSTRUCTIONS FOR THE IMPATIENT:

GROMACS uses a standard autoconf script and makefiles created 
by automake, like most GNU programs. This means your normal 
installation actions are limited to:

./configure   
make
make install          

That's it! Most compiler flags and required libraries are checked
automatically by configure, and it will tell you if something is
missing. The default installation location is /usr/local/gromacs
(change it with --prefix).  



* INSTALLING FFTW:

The FFTW library has been removed from the distribution since it 
is not part of our package, but it is very easy to install separately
if it is not already present. Download the source code from 
http://www.fftw.org , or get it from http://www.gromacs.org .

Read the FFTW installation instructions for details. In short, to
install the single precision library under /usr/local type

./configure --enable-float

and then type

make
make install

Note that in contrast to GROMACS, FFTW defaults to double. Even
if you don't think you'll need it's a good idea to install the
double precision libraries too, once and for all. Clean your
build by issuing 

make distclean

and then type

./configure --enable-type-prefix
make
make install

Your double precision FFTW files will have a "d" prefix.

(It is possible to compile a crippled GROMACS without FFTW, but we
strongly discourage it - check the configure options for details)



* FFTW OR OTHER LIBRARIES IN NON-STANDARD LOCATIONS:

If you install FFTW in your homedirectory or some other place where
it isn't found automatically (not all systems search /usr/local)
by the compiler you should set the environment variables before 
executing configure. Assume we configured and installed FFTW with 
--prefix=/home/erik/fftw. If your shell is tcsh, you set

setenv CPPFLAGS -I/home/erik/fftw/include
setenv LDFLAGS  -L/home/erik/fftw/lib

or, if you are using a bash shell:

export CPPFLAGS=-I/home/erik/fftw/include
export LDFLAGS=-L/home/erik/fftw/lib

...and then you run the Gromacs configure script. Similarly, if you
don't like the compilers configure selects, just set them with 
the variables CC and/or F77 (MPICC for an MPI compiler).

Don't use LDFLAGS to add extra libraries! Put them in LIBS instead, e.g.

setenv LIBS "-lstuff"     to add libstuff at the linking stage.


Once installed, you can link the Gromacs executables to e.g.
/usr/local/bin if you want all users to have them in their path.



* SPECIAL OPTIONS; FORTRAN, ASSEMBLY AND PARALLEL GROMACS WITH MPI:

Typing ./configure --help will give you some options like compiling
for parallel runs using MPI. Not all architecture use the fast
fortran loops per default, so if you know you have a fast fortan
compiler you should check that option. It won't have much effect
for modern x86 boxes though, since these use assembly innerloops.

To compile the assembly loops you need a reasonably recent version
of binutils. The configuration script checks it - pick up a later
version at www.gromacs.org if yours is too old. Don't disable
the assembly loops unless you absolutely have to...


For instance, if you want to compile only the mdrun executable
with parallel MPI support:

make clean               
./configure --enable-mpi
make mdrun 
make install-mdrun

If you want to keep your non-mpi mdrun instead of overwriting
it, you can append a suffix with --program-suffix="_mpi":
If you only want to create the MPI version of the entire package 
you can just issue the normal make commands. The mdrun-only
installation can also be useful to have e.g. a general version 
of gromacs for analysis in the main binary directory, and then 
subdirectories with only an optimized mdrun for each cpu.

You can find more installation information on the GROMACS homepage
if you have any problems, and don't hesitate to contact us if you 
find any bugs in the configuration. The architecture names have 
been expanded and are almost identical to the GNU ones, but where 
it is possible we have added an extra level with more detailed 
processor specifications to enable higher optimization. If you 
have a very heterogeneous environment it might be a good idea
to compile a full non-optimized version in the main directory,
and then just optimized versions of mdrun in the processor
subdirectories!



* VPATH BUILDS:

If you want to do development on several architectures, you should
use a version of make that support VPATH (we suggest GNU make)
and create a new directory to contain the object files for this 
architecture (e.g. i686-pc-linux-gnu/obj). Then run configure from this 
new directory (../../configure) - you might have to make distclean first.
This way you keep all your object files (speeds up compiles) and 
change architecture by switching to a different object directory.



* ARE YOU STILL HAVING PROBLEMS?

Post it to the GROMACS mailing lists. We read these on a regular basis,
and in many cases another user might already be familiar with the
task you're trying to perform!



                Good luck compiling and running! 

     	               THE GROMACS CREW 

		      gromacs@gromacs.org



---------------------------------------------------------------------

These are the generic install instructions from autoconf:
  
   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

