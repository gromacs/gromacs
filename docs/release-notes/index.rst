.. Note that this must be a single rst file in order for Sphinx
   to build into into a single plain-text file to place in the
   installation tarball.

Release notes
*************

These release notes document the functionality changes in |Gromacs|
|version| that have taken place in |Gromacs| since version 2016.

Some bug fixes are mentioned here, but those fixed in 5.1 or 2016
branches are (or will be) documented there. If the same functionality
is supported in both branches, bugs fixed on older branches can
generally be assumed to be fixed in patch releases of subsequent
major/minor versions. Where issue numbers are reported, more details
can be found at https://redmine.gromacs.org at that issue number.

Highlights
==========

Here's some highlights of what you can expect, along with more detail
in the links below!

As always, we've got several useful performance improvements, with or
without GPUs, and all enabled and automated by default. We are
extremely interested in your feedback on how well this worked on your
simulations and hardware. They are:

* A new dual-list dynamic-pruning algorithm for the short-ranged
  interactions, that uses an inner and outer list to permit a longer-lived
  outer list, while doing less work overall.
* PME long-ranged interactions can now run on a single GPU, which
  means many fewer CPU cores are needed for good performance.

There are some new features available also:

* The AWH (Accelerated Weight Histogram) method is now supported,
  which is an adaptive biasing method used for overcoming free energy
  barriers and calculating free energies (see
  http://dx.doi.org/10.1063/1.4890371).
* A physical validation suite is added, which runs a series of short
  simulations, to verify the expected statistical properties,
  e.g. of energy distributions between the simulations, as a sensitive
  test that the code correctly samples the expected ensemble.
* Conserved quantities are computed and reported for more integration
  schemes - now including all Berendsen and Parrinello-Rahman schemes.

.. TODO remove before final release

Beta phase
==========

During the beta phase, numerous fixes will occur, many of which will
be fixes of fixes, or fixes of new features. Those will be temporarily
documented in the release notes, but will not appear in the final 2018
release notes because they were never bugs that formally affected
users. If you want to find whether a beta-phase issue has been fixed,
you can find them by searching for the text "beta-phase fix" in the
relevant subsection.

.. TODO Later, 2018.1 patch-fix version release notes will perhaps
   go here

Details
=======

New and improved features
-------------------------

Added support for AWH biasing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The AWH (Accelerated Weight Histogram) method is an adaptive biasing
method used for overcoming free energy barriers and calculating
free energies (see http://dx.doi.org/10.1063/1.4890371). Although
AWH can in general bias any system parameter, this change only
implements biasing of reaction coordinates. The actual force
distribution and coordinate handling is taken care of by the pull
code. AWH interacts with the pull code by registering itself as
the external potential module for the coordinate that should be
AWH biased. The AWH code sets the potential and force for those
coordinates. See the reference manual for full documentation.

It includes a feature to compute the time-integrated force
correlation, also known as the friction tensor (see
e.g. http://dx.doi.org/10.1103/PhysRevLett.108.190602). The friction
tensor defines a metric on the coordinate space and the local volume
element of this metric is a useful measure for determining which
regions need more or less sampling.

Added physical validation suite
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These tests run series of short simulations and verify the expected
statistical properties, e.g. of energy distributions between the
simulations, as a sensitive test that the code correctly samples
the expected ensemble.

To run everything locally (which can take a few hours!) use

::

   cmake -DGMX_PHYSICAL_VALIATION=ON ..
   make
   make check-phys-run

Currently, the script is only running a few systems, checking
convergence of energy conservation in NVE system with decaying
timestep, and the ensembles generated by a few thermostating and
barostating algorithms. Other systems and ensembles covering a broader
combination of settings will be added over time.

Added reporting of conserved quantities for coupling algorithms
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The work that some more coupling algorithms (Berendsen pressure,
Berendsen temperature, and Parrinello-Rahman pressure) applies on the
system is calculated and integrated. Formulae are in the reference
manual.

Added acceleration correction VCM mode
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
New mdp option to remove the center of mass translational velocity and
correct the center of mass position, assuming linear acceleration. This
is useful e.g. for pulling on a group using an absolute reference.

Changed handling of :ref:`gmx mdrun` -gpu_id
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
As more code is able to be offloaded to the GPU, task assignment has
become more complex, and is likely to get more complex still. The
-gpu_id command-line option now merely enables the user to restrict
which of the detected GPUs are available to the automated task
assignment scheme, somewhat like the CUDA_VISIBLE_DEVICES environment
variable. For the rare cases where full control is needed,
``gmx mdrun -gputasks`` is available and documented in the user guide, but is
likely to be replaced before the final 2018 release.

Added log output for equivalent 1x1 pair-list setup
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The |Gromacs| NxM setup can use a shorter pair-list buffer than
other codes' simpler 1x1 scheme, so our log files now report
the equivalent setup, to help people doing performance and
correctness comparisons.

New mdp input for electric fields
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EW3DC for non-neutral systems
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Added the corrections to force and energy according to
Ballenegger, Arnold, and CerdaÌ€, J. Chem. Phys. 131, 094107 2009
(http://dx.doi.org/10.1063/1.3216473). Hinted that people
read http://doi.org/10.1021/ct400626b to help make good choices.
Added a warning in grompp for charged systems with Ewald.

Reduce rounding errors in SETTLE
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The parameters for SETTLE are now computed in double precision, which
lowers the systematic error.

Made ``gmx mdrun -pforce`` terminate with non-finite forces
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The :ref:`gmx mdrun` option -pforce used to print non-finite forces,
but would not terminate the run if any were found. Now a fatal error
is issued.

Performance improvements
------------------------

Dual pair-list buffer with dynamic pruning
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The |Gromacs| simulation engine now uses a dual pair-list algorithm with
dynamic pruning in cases where the Verlet buffer is determined
automatically (which is the default). This allows further reducing the
frequency of pair search (and domain decomposition) while avoiding
large Verlet buffers and the previously inherent increased
computational cost in the short-ranged nonbonded kernels.  This is
achieved by constructing an "outer" pair-list built infrequently,
which includes many pairs in the list that are outside the cut-off
range for most of the lifetime of the list. Such pairs can be pruned
out every few steps and with that building a smaller, "inner"
pair-list with a shorter life-time, and importantly a correspondingly
shorter Verlet buffer (still adhering to the specified tolerance),
which is then used in the nonbonded kernels. When short-ranged
interactions are running on the GPU, the dynamic pruning is overlapped
with the integration on the CPU, so is usually free. This feature
improves all of simulation rate, hardware utilization, and power
consumption.

Implement support for PME long-ranged interactions on GPUs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A single GPU can now be used to accelerate the computation of the TODO
long-ranged PME interactions. This feature provides excellent
performance improvements, in particular that only 2-4 CPU cores per
GPU will be about as fast as the 2016 version that needed many more
CPU cores to balance the GPU. Performance on hardware that had good
balance of GPU and CPU also shows minor improvements, and the capacity
for hardware with strong GPUs to run effective simulations is now
greatly improved.

Currently, the GPU used for PME must be either the same GPU as used
for the short-ranged interactions and in the same single rank of the
simulation, or any GPU used from a PME-only rank. mdrun -pme gpu now
requires that PME runs on a GPU, if supported. All CUDA versions and
hardware generations supported by |Gromacs| can run this code path,
including CUDA 9.0 and Volta GPUs. However, not all combinations
of features are supported with PME on GPUs - notably FEP calculations
are not yet available.

The user guide is updated to reflect the new capabilities, and more
documentation will be forthcoming.

Added more SIMD intrinsics support for PME spread and gather
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Achived speedup on Intel KNL processors of around 11% for PME
spread/gather on typical simulation systems.

Added SIMD intrinsics version of simple update
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
In the simple case of leap-frog without pressure coupling and with at
most one temperature-coupling group, the update of velocities and
coordinates is now implemented with SIMD intrinsics for improved
simulation rate.

Add SIMD intrinsics version of Urey-Bradley angle kernel
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
For steps where energies and shift forces are not required, this kernel
improves performance, which can otherwise be rate limiting in GPU-accelerated
runs, particularly with CHARMM force fields.

Use OpenMP up to 16 threads with AMD Ryzen when automating run setup
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AMD Ryzen appears to always perform slightly better with OpenMP
than MPI, up to using all 16 threads on the 8-core die.

128-bit AVX2 SIMD for AMD Ryzen
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
While Ryzen supports 256-bit AVX2, the internal units are organized
to execute either a single 256-bit instruction or two 128-bit SIMD
instruction per cycle. Since most of our kernels are slightly
less efficient for wider SIMD, this improves performance by roughly
10%.

Choose faster nbnxn SIMD kernels on AMD Zen
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
On AMD Zen, tabulated Ewald kernels are always faster than analytical.
And with AVX2_256 2xNN kernels are faster than 4xN.
These faster choices are now made based on CpuInfo at run time.

Refs :issue:`2328`

Enabled group-scheme SIMD with GMX_SIMD=AVX2_128
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The group-scheme kernels can can use AVX instructions from either the
AVX_128_FMA and AVX_256 extensions. But hardware that supports the new
AVX2_128 extensions also supports AVX_256, so we enable such support
for the group-scheme kernels.

Improved Ewald-style short-ranged interactions on Intel Skylate CPUs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These now default to use tabulated Ewald short-ranged interactions.

Detect AVX-512 FMA units to choose best SIMD
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Recent Intel x86 hardware can have multiple AVX-512 FMA units, and the
number of those units and the way their use interacts with the way the
CPU chooses its clock speed mean that it can be advantageous to avoid
using AVX-512 SIMD support in |Gromacs| if there is only one such
unit.  Because there is no way to query the hardware to count the
number of such units, we run code at CMake and mdrun time to compare
the performance from using such units, and recommend the version that
is best. This may mean that building |Gromacs| on the front-end node
of the cluster might not suit the compute nodes, even when they are
all from the same generation of Intel's hardware.

Speed up nbnxn buffer clearing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Tweaked conditional in the nonbonded GPU kernels
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
GPU compilers miss an easy optimization of a loop invariant in the
inner-lop conditional. Precomputing part of the conditional together
with using bitwise instead of logical and/or improves performance with
most compilers by up to 5%.

Improvements to |Gromacs| tools
-------------------------------

Added option -water tips3p to pdb2gmx.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fixes :issue:`2272`

Removed incorrect comment for CHARMM tips3p
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Removed CHARMM tips3p performance warning in :ref:`gmx pdb2gmx` input file,
since the performance loss is negligible with the cutoff-scheme=Verlet.

Fixed :ref:`gmx check` for tprs with different numbers of atoms
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fixes :issue:`2279`

Split off the NMR related analyses from :ref:`gmx energy`.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A new tool :ref:`gmx nmr` is created by straight copying code from
:ref:`gmx energy` to a new tool. The reason is to reduce complexity.

A few cleanups are introduced to pass the valgrind memory
test.

Added references the :ref:`gmx nmr` in the manual.

Avoided :ref:`gmx grompp` charge warning from merely rounding error
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Even though the :ref:`gmx grompp` total charge check uses double for summation,
there are rounding errors for each charge when charges are stored
in single precision. Now the charge check rounds the net charge of
molecules to integer when the difference is less than the maximum
possible sum of charge rounding errors.

Fixes :issue:`2192`

Made duplicate atoms in bondeds an error in :ref:`gmx grompp`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Having duplicate atom indices in bonded interactions used to be only
a warning. But since in nearly all cases this will lead to issues,
this is now a error, except for angle restraints where it can be
useful so there it is now a note.

:issue:`2141`

Clarified :ref:`gmx editconf` help text
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
It is possible that users can confuse -c with -center so this
patch makes it clear that -center doesn't do anything unless the
user really wants to shift the center of the system away from the
middle of the box.

Fixes :issue:`2171`

Cleaned up memory usage in :ref:`gmx traj` and :ref:`gmx trjconv`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Made :ref:`gmx grompp` -r obligatory with position restraints
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
With position restraints it would often occur that users accidentally
used equilibrated coordinates instead of the original coordinates for
position restraint coordinates due to :ref:`gmx grompp` -r defaulting
to -c. Now -r always need to be supplied with position restraints,
but using the same file name as with -c will reproduce the old
behavior.

Added selection-enabled :ref:`gmx traj`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
For now, this tool only plots coordinates, velocities, and forces for
selections, so it should provide a full replacement for -ox, -ov, -of,
-com, and -mol from :ref:`gmx traj`.

.. TODO Remove beta-phase fixes below before final release

Bugs fixed
----------

Fixed multiple time stepping with Parrinello-Rahman and Nose-Hoover.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These now work in correct Trotter style, applied once and scaled by
the correct number of steps.

Fixes :issue:`2031`
Fixes :issue:`2032`

Applied Berendsen pressure coupling only at nstpcouple steps
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Berendsen pressure coupling was mistakenly applied on successive
steps. Since there is no need for this, this is changed to act only on
nstpcouple steps. Note that this change prevents continuation from old
checkpoint files for Berendsen pressuring-coupling runs, since the
previous-step pressure is no longer stored.

Add missing Ewald correction for pme-user
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
With :mdp-value:`coulombtype=PME-User`, the Ewald mesh energy was not subtracted
leading to (very) incorrect Coulomb energies and forces.

Fixes :issue:`2286`

Fix incorrect dV/dlambda for walls
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The free-energy derivative dV/dlambda for walls, which can
be perturbed by changing atom types of non-wall atoms, only
contained the B-state contribution.

Fixes :issue:`2267`

Supported OpenMP for orientation restraints
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Previously this was broken, but has been fixed and is now tested
and supported.

Fixed orientation restraint reference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The resetting of the COM of the molecule with orientation restraints
for fitting to the reference structure was done with the COM of the
reference structure instead of the instantaneous structure. This does
not affect the restraining (unless ensemble averaging is used), only
the printed orientation tensor.

Fixes :issue:`2219`

Used graph with orientation restraints
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
With the Verlet cut-off scheme by default molecules are not made whole.
Now they are made whole when orientation restraints are used.
Added checks and assertions for correct PBC treatment with orientation
restraints.

Fixes :issue:`2228`

Fix Ekin at step 0 with COM removal
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The kinetic energy at step 0 was computed from the velocities without
the center of mass velocity removed. This could cause a relatively
large jump in kinetic energy, especially for small systems.
Now compute_globals is called twice with COM removal so we get
the correct kinetic energy.

Fixed :ref:`gmx grompp` with Andersen massive and no COM removal
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fixed a floating point exception leading to a segv.
Also fixed possible different rounding for the interval for
Andersen massive in :ref:`gmx grompp` in mdrun for the common case where tau-t
is a multiple of delta-t.

Fixes :issue:`2256`

Improved Verlet buffer constraint estimate
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The displacement estimate for a constrained atom (typically H)
rotating around the COM with a partner atom is now derived and
documented correctly.  Note that we (still) use a Gaussian with
matched variance, which results in a much larger buffer than
necessary, since the tail of the displacement distribution sets the
buffer size and the Gaussian has a long tail whereas the actual
distribution has no tail.

Fixed virtual site generation for water oxygens not named OW
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
:ref:`gmx pdb2gmx` would break when generating virtual sites if water oxygens
were not named OW. Now checking for the atomnumber instead.

Fixes :issue:`2268`

Fixed thread-MPI rank choice for orientation restraints
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Only a single rank is supported, so that must be what the thread-MPI
code will choose. There's another check later on that catches the
multi-rank MPI case.

Avoided some incorrect behavior with :ref:`gmx solvate`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
:ref:`gmx solvate` cannot replicate non-rectangular solvent boxes correctly
(there are several different places that assume a diagonal box matrix),
so give a fatal error if that is attempted.  To support some uses with
triclinic boxes, skip the replication step if the solvent and target box
sizes are already equal.

Support for general triclinic boxes can be added separately, and the
check introduced here can be valuable even in that case: it keeps a
pre-equilibrated solvent box intact if the target box size is the same.

Related to fix of :issue:`2148`

Fixed DD exact continuation in reproducible node
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
With domain decomposition, the local atom density, used for setting
the search grid for sorting particles, was based on the local atom
count including atoms/charge groups that would be moved to neighboring
cells. This lead to a different density value, which in turn could
result in a different number of search grid cells and thus a different
summation order during a run compared with continuing that run from a
checkpoint, when no atoms would be moved. That difference violated
the intention of ``mdrun -reprod``, and is now fixed.

Refs Fixes :issue:`2318`

Now mdrun only stops at nstlist steps with mdrun -reprod
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Stopping mdrun with two INT or TERM signals (e.g. from Ctrl-C from the
terminal shell) would always happen right after the first global
communication step. But this breaks exact continuation. Now with
``mdrun -reprod`` a second signal will still stop at a pair-list
generation step, like with the first signal, so we can still have
exact continuation.

Fixes :issue:`2318`

Added check for GPU detection support before detecting GPU devices
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
When a CUDA-enabled binary was run on a node with no CUDA driver
available, a note was issued that the version of the CUDA driver is
insufficient, which was wrong and now fixed.

Fixes :issue:`2322`

Removed duplicated lines from OPLS ffbonded.itp
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Identical lines have been removed, as identified
with uniq.

Fixes :issue:`1678`.

mdrun no longer warns about NVML clocks that are at max
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If the clocks are already maxed out there is no point in echoing
warnings about not being able to set them.

Fixes :issue:`2313`.

Used reduced default tolerances for tpx comparison
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The tolerances for gmx check are mainly intended for handling slight
statistical deviations, but they can hide differences between tpr
files, when the user likely wants exact checks on small quantities
like Lennard-Jones parameters. This changes changes the default
relative tolerance to 0.000001 and the absolute tolerance to zero, so
that we only allow for any minor differences due to compiler
optimization.

Fixes :issue:`2024`.

Fixed return values of frame-reading functions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This function was based on read_first_x that returned the number of
atoms, and was documented to do the same, but has always returned a
logical boolean about whether a frame has been read. This led to
aspects of ``gmx spatial`` and ``gmx trjcat -demux`` being broken.

Fixed by returning a proper bool, and fixing the remaining logic that
used the return value in a non-boolean sense.

Refs :issue:`2157`

Removed PBC before generating TPR with group scheme
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Ensure that all molecules have been made whole before generating the
run input file when using the group scheme, to avoid error messages
for large charge groups when molecules are broken over PBC boundaries.

Fixes :issue:`2339`

Fixed PBC error in gmx_spatial
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fix provided by Alexey Anikeenko.

Fixes :issue:`2157`.

Documented power spectrum options of gmx velacc
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fixes :issue:`2019`.

Required TPR file for gmx cluster
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The program crashes without it, so it wasn't optional.

Fixes :issue:`2170`.

Disallowed ascii formats for gmx trjcat
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Since gmx trjcat (deliberately) does not use any .tpr file, the tool
can't handle trajectory formats such as .gro or .pdb where
atom/residue names are needed.

Fixes :issue:`2225`.

Improved grompp missing-parameters error message
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If an interaction entry had parameters but not the function type, then
the error message has been confusing. Note that even when only one
function type is implemented, the field is still required, which makes
for ready extensibility.

Refs :issue:`2144`

Checked for large energy at first step
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Also added step number to fatal error message.

Fixes :issue:`2333`

Disallowed combination of PME-user and verlet cutoff
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fixes :issue:`2332`

Avoided confusing message at end of non-dynamical runs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Energy minimization, test-particle insertion, normal-mode analysis,
etc.  are not targets for performance optimization so we will not
write performance reports. This commit fixes an oversight whereby we
would warn a user when the lack of performance report is normal and
expected.

Fixes :issue:`2172`

Required ``-ntmpi`` with setting ``-ntomp`` with GPUs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
With GPUs and thread-MPI, setting only ``gmx mdrun -ntomp`` could lead
to oversubscription of the hardware threads.  Now, with GPUs and
thread-MPI the user is required to set ``-ntmpi`` when using
``-ntomp``. Here we chose that to also require ``-ntmpi`` when the
user specified both ``-nt`` and ``-ntomp``; here we could infer the
number of ranks, but it's safer to ask the user to explicity set
``-ntmpi``.  Note that specifying both ``-ntmpi`` and ``-nt`` has
always worked correctly.

Fixes :issue:`2348`

``mdrun -pme cpu -pmefft gpu`` now gives a fatal error  - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----
Previously was silently ignored.

Fixed mdrun -nb auto -pme auto when GPUs are absent - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The logic was flawed such that GPUs were "selected" for use even
though none had been detected. That led to the GPU behaviour of
avoiding using separate PME ranks.

Also made a minor fix to the logic for emulation. The new
interpretation of ``mdrun -gpu_id`` does not need to trigger an error
when GPU IDs have been supplied along with the emulation environmnet
variable.

Fixes :issue:`2315`

Fixed ArrayRef<SimdDInt32> for SSE/AVX128 - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fixes :issue:`2326`

Fixed PME gather in double with AVX(2)_128 - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The 4NSIMD PME gather change did not change the conditional
for grid alignment. This is made consistent here.
Note that the 4NSIMD change lowered the performance of PME gather
on AVX_128_FMA and AVX2_128 in double precision. We should consider
using 256-bit AVX for double precision instead.

Fixes :issue:`2326`

Reformulated PME and SHAKE test tolerances - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fixes :issue:`2306`
Fixes :issue:`2337`
Fixes :issue:`2338`

Fixed freeing of GPU context - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If a device context was not used, CUDA gives an error if we attempt to
clear it, so we must avoid clearing it.

:issue:`2322`

Fixed initial temperature reporting - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fixes :issue:`2314`

Fixed compilation issues for AVX-512 - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- gcc-5.4.0 incorrectly requires the second argument of
  _mm512_i32gather_pd() to be a double pointer instead
  of void, but this should fix compilation for both
  cases.
- Work around double precision permute instruction
  only available with AVX512VL instructions.

Fixes :issue:`2312`

Cleared vsite velocities for simple integrators - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The simple integrator loops did not clear
the velocities of virtual sites. This allows velocities of virtual
sites to slowly increase over time. To prevent this, velocities
of virtual sites are now cleared in a separate loop.

Fixes :issue:`2316`

Fixed fft5d pinning - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A CUDA build on a node with no driver installed can never have
selected a CUDA pinning policy, and erroneously unpinning leads to a
fatal error. Instead, FFT5D now remembers whether it made pinning
possible, which can only occur when there was a driver and a valid
device, so that it can unpin only when appropriate.

Fixes :issue:`2322`

Avoided assertion failure in AWH - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
With an unstable reaction coordinate or unequilibrated system, AWH
could cause an assertion to fail. Now AWH checks for valid coordinate
input and throws an exception with a clear message.

Corrected AWH input file name in documentation - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Mdrun was expecting user input data file 'awhinit.xvg' while the
mdp-option documentation has 'awh-init.xvg'.

Changed the GPU SMT cut-off to quadratic - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The advantage of SMT diminishes rapidly with the number of cores.
So the system sizes should be compares to the square of the number
of cores.

Fixed AVX-512 SIMD test for C compilation - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Avoid using C++ features in the test, since it should test both the C
and C++ compilers.

Leave NVML use off by default - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Even if NVML is found, leave the default off because the
linking is unreliable for reasons that are currently unclear,
and only in some cases is linking with NVML advantageous.

Fixes :issue:`2311`

Fixes for compiler support - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Double precision, debug mode, proper release mode and some quirky
cases were all improved in multiple ways to compile and pass tests
reliably.

Consume any error produced during GPU detection - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Having reported it, we should clear the CUDA error status so that
future calls do not continue to return it.

Fixes :issue:`2321`

Replace intrinsic with inline asm for AVX512 unit test - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Using inline assembly avoids compilers at low optimization
levels not generating efficient code for the timing routines, and
also avoids needing an assembler.

Fixes :issue:`2340`

Fixed table tests and improve table construction - beta phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Since compilers are allowed to use different FMA constructs, we
now allow the consistency check to deviate a few ulps.

For sinc and other extreme functions that oscillate, the
scan over the definition range to locate the minimum quotient
between the 1st and 4th derivative to set the table spacing
exposes some delicate errors. Basically, it is not possible
to have arbitrarily low relative errors for the derivative
for a function that has large magnitude in the same place.
For now we reduce the test interval for sinc(); this should
anyway not be relevant for normal well-behaved MD functional
forms.

Fixes :issue:`2336`.

Supported Simd4N for SimdRealWidth<4 - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If the SIMD with is smaller 4 but Simd4N is supported
then use Simd4 for Simd4N.

Fixes :issue:`2327`

Made AVX-512 CMake detection work - beta phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Both inline assembly and the support flag have to be set for the
timing code to be compiled.

Fixed shift usage for KNC - beta phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
9437181eacb removed the shift operator without replacing the usage for
KNC.

Made acceleration correction VCM mode work - beta phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The new acceleration correction VCM mode did not actually correct
the coordinate for the acceleration, since a null pointer was passed.
Introduced an extra CGLO flag to allow for correction of the
coordinates, but leave the initial coordinates unaffected.

Fix builds on ARM & clarify (ARM) GPU support - beta phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fixed a typo in architecture.h that prevented
the Neon Asimd instructions from being selected,
and updated the CPU brand detection to also look
for a new label with Tegra X1 on Ubuntu 16.04

Fixes :issue:`2287`

Improved documentation and code for physical validation - beta phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Adds documentation for the physical validation suite in
docs/dev-manual/physical_validation.rst

As this was misunderstandable, changed the default behavior of
`make check-phys` and `make check-all` to actually run the simulations.
This might take very long, but since the physical validation tests need to
be turned on explicitly via cmake option, the chances of somebody using the
tests by mistake are low. The `check` targets are:

* `make check`: Run unit and regression tests (unchanged)
* `make check-phys`: Run simulations needed for physical validation, then
  run physical validation tests
* `make check-phys-analyze`: Only run physical validation tests, assuming
  that simulations were run previously and are available.
* `make check-all`: Combination of `make check` and `make check-phys`

Additionally, `make check-phys-prepare` can be used to prepare GROMACS
input files and a script to run the simulations needed for the physical
validation tests.

Fixes :issue:`2349`

Removed mdrun features
----------------------

Removed hybrid GPU+CPU nonbonded mode
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This mode was not very useful, since it ran the non-local non-bonded
interactions on the CPU. The fraction of non-local interaction is set
by the domain decomposition, so this is not flexible.
Also this mode is not being tested.

QM/MM: removed optimization and transition-state search
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
These functionalities used to only work with old versions of Orca,
had very limited use and will possibly not work any longer now.

Updated application clock handling on Pascal+ GPUs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Starting with Pascal (CC >= 6.0) it is no longer possible to change
application clocks without root privileges. Application
clocks are still reported for Pascal+, but there is no longer
suggestions about changing them.

Removed continuation from :ref:`gmx convert-tpr`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Removed the obsolete option of :ref:`gmx convert-tpr` to write a tpr
file for continuation using a trajectory and energy file. This is
superseded by checkpointing.

Portability
-----------

Enabled compiling CUDA device code with clang
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
clang can be used as a device compiler by setting GMX_CLANG_CUDA=ON. A
CUDA toolkit (>=7.0) is also needed.

Increased the oldest cmake, compiler and CUDA versions required
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We now require gcc-4.8.1, clang-3.3 and icc-15, so we can rely on full
C++11 support. We now also require CUDA-6.5 and CMake-3.4.3.

Check CUDA available/compiled code compatibility
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Added an early check to detect when the :ref:`gmx mdrun` binary does
not embed code compatible with the GPU device it tries to use nor does
it have PTX that could have been just-in-time compiled.

Additionally, if the user manually sets GMX_CUDA_TARGET_COMPUTE=20 and
no later SM or COMPUTE but runs on >2.0 hardware, we'd be executing
just-in-time-compiled Fermi kernels with incorrect host-side code
assumptions (e.g amount of shared memory allocated or texture type).
This change also prevents such cases.

Fixes :issue:`2273`

Disabled ARM Neon native rsqrt iteration used in short-ranged interactions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Fixes :issue:`2261`

Fix build with cmake 3.10 on gentoo - beta-phase fix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Miscellaneous
-------------

Update note in manual on stochastic dynamics integrator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The comment in the SD section about Berendsen was outdated.
Added a few sentences on equilibration/damping of modes.

Add grompp note for Parrinello-Rahman + position restraints
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This combination can be unstable and is often not desirable, so
grompp now issues a note to suggest alternatives to the user.

Refs :issue:`2330`

Clarified the description of Fmax during energy minimization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Improved vsite parallel checking
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The vsite struct now stores internally whether it has been configured
with domain decomposition. This allows for internal checks on valid
commrec, which have now been added, and would have prevented :issue:`2257`.

Added partial support for writing masses and partial charges with TNG files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:issue:`2188`

Updated TNG to version 1.8.1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Added data block for atom masses.
Fixes :issue:`2187` and :issue:`2250` and other bugs and warnings.

Added load balance fraction to DLB print
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
DLB can often be based on a small fraction of the total step time,
especially with GPUs. Now this is printed to md.log and stderr.

Added reference for dihedral function in OPLS.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The OPLS four-term dihedral function was not described in the
reference listed earlier, so this was updated. Also updated
the reference to the three term dihedral to an older paper.

Updated developer guide
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Imported and updated more material from the wiki. Included coverage of
some recent discussion points on C++11 and preprocessor use.

Updated mdrun signal help text
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Updated mdrun help text on signal handling for old and recent changes
to the behavior.

Fixes :issue:`2324`

